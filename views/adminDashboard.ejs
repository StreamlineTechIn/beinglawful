<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Dashboard</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/chart.js@3.9.1/dist/chart.min.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.22.0/firebase-app-compat.js"></script>
  <script src="https://www.gstatic.com/firebasejs/9.22.0/firebase-auth-compat.js"></script>
  <script src="https://www.gstatic.com/firebasejs/9.22.0/firebase-firestore-compat.js"></script>
<script>
        // Firebase configuration (replace with your own config from Firebase Console)
       const firebaseConfig = {
            apiKey: "your-api-key", 
            authDomain: "beinglawful-ee5a4.firebaseapp.com",
            projectId: "beinglawful-ee5a4",
            storageBucket: "beinglawful-ee5a4.firebasestorage.app",
            messagingSenderId: "your-messaging-sender-id", 
            appId: "your-app-id"
        };

        // Initialize Firebase
        firebase.initializeApp(firebaseConfig);
        const db = firebase.firestore();

        // Initialize callLogs and loginLogs arrays
        let callLogs = [];
        let loginLogs = [];
        let feedbackEntries = [];
        const tbody = document.getElementById('student-feedback-body');
        const button = document.getElementById('exportExcelBtn');
        const buttonText = document.getElementById('exportButtonText');
        const loadingText = document.getElementById('loadingText');

        // Format date to IST
        function formatDateIST(date) {
            return new Date(date).toLocaleString('en-US', {
                timeZone: 'Asia/Kolkata',
                weekday: 'long',
                year: 'numeric',
                month: 'long',
                day: 'numeric',
                hour: '2-digit',
                minute: '2-digit',
                second: '2-digit'
            });
        }
async function saveLoginLog(ipData) {
  if (!auth.currentUser) {
    console.warn("No authenticated user found, login data not saved");
    return;
  }
  try {
    await addDoc(collection(db, "adminLoginLogs"), {
      userId: auth.currentUser.uid,
      ipAddress: ipData.ip,
      timestamp: new Date(),
      userAgent: navigator.userAgent,
    });
    console.log("Successfully saved to /adminLoginLogs");
  } catch (error) {
    console.error("Error writing to /adminLoginLogs:", error);
  }
}
        // Track IP address and location for https://beinglawful.in/admin-login
        async function trackIpAddress() {
            try {
                // Fetch IP address
                const ipResponse = await fetch('https://api.ipify.org?format=json');
                if (!ipResponse.ok) throw new Error('Failed to fetch IP address');
                const { ip } = await ipResponse.json();

                // Fetch geolocation data
                const geoResponse = await fetch(`https://ipapi.co/${ip}/json/`);
                if (!geoResponse.ok) throw new Error('Failed to fetch geolocation');
                const geoData = await geoResponse.json();

                const loginData = {
                    ipAddress: ip,
                    latitude: geoData.latitude ? parseFloat(geoData.latitude).toFixed(6) : 'N/A',
                    longitude: geoData.longitude ? parseFloat(geoData.longitude).toFixed(6) : 'N/A',
                    loginTime: new Date().toISOString()
                };
                console.log('IP Tracking:', loginData);

                // Save to Firestore with authentication check
                if (typeof firebase !== 'undefined' && firebase.auth) {
                    const user = firebase.auth().currentUser;
                    if (user) {
                        const idToken = await user.getIdToken();
                        const saveResponse = await fetch('/add-login-log', {
                            method: 'POST',
                            headers: {
                                'Authorization': `Bearer ${idToken}`,
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify(loginData)
                        });
                        if (!saveResponse.ok) throw new Error('Failed to save login log to server');
                        const result = await saveResponse.json();
                        console.log('Login data saved to Firestore:', result);
                    } else {
                        console.warn('No authenticated user found, login data not saved');
                        if (typeof db !== 'undefined') {
                            await db.collection('adminLoginLogs').add(loginData); // Fallback to direct Firestore save
                        } else {
                            console.error('Firestore not initialized, data not saved');
                        }
                    }
                } else {
                    console.error('Firebase not loaded, data not saved');
                }
            } catch (error) {
                console.error('Error tracking IP address:', error);
                // Optional: Notify admin or log to a separate error collection if needed
            }
        }

        async function fetchAndDisplayLogs() {
            try {
                const snapshot = await db.collection('adminLoginLogs').orderBy('loginTime', 'desc').get();
                loginLogs = snapshot.docs.map(doc => ({
                    id: doc.id,
                    ...doc.data()
                }));
                renderLoginLogTable();
            } catch (error) {
                console.error('Error fetching logs:', error);
            }
        }

        function renderLoginLogTable() {
            const tableBody = document.getElementById('login-logs-body');
            if (!tableBody) return;

            tableBody.innerHTML = ''; // Clear existing rows
            loginLogs.forEach(log => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${log.ipAddress}</td>
                    <td>${log.latitude}</td>
                    <td>${log.longitude}</td>
                    <td>${new Date(log.loginTime).toLocaleString()}</td>
                `;
                tableBody.appendChild(row);
            });
            updateLoginLogFilters();
        }

        async function fetchCallLogs() {
            try {
                const response = await fetch('/call-logs');
                if (!response.ok) {
                    throw new Error('Failed to fetch call logs');
                }
                callLogs = await response.json();
                renderCallLogTable(callLogs);
            } catch (error) {
                console.error('Error fetching call logs:', error);
                const tbody = document.getElementById('call-logs-body');
                if (tbody) {
                    tbody.innerHTML = '<tr><td colspan="6" class="text-gray-700 text-center py-4">Error loading call logs.</td></tr>';
                }
            }
        }   

        document.addEventListener('DOMContentLoaded', fetchCallLogs);

        // Update filter dropdowns for call logs
        function updateCallLogFilters() {
            const columns = ['id', 'callDate', 'caller', 'recipient'];
            columns.forEach(column => {
                const select = document.querySelector(`#call-logs select[data-column="${column}"]`);
                if (!select) return;
                select.innerHTML = '<option value="All">All</option>';
                const values = new Set();
                callLogs.forEach(log => {
                    const value = column === 'callDate' ? formatDateIST(log[column]) : log[column];
                    if (value && !values.has(value)) {
                        values.add(value);
                    }
                });
                [...values].sort().forEach(value => {
                    const option = document.createElement('option');
                    option.value = value;
                    option.textContent = value;
                    select.appendChild(option);
                });
                select.addEventListener('change', () => applyFilters('call-logs'));
            });
        }

        // Update filter dropdowns for login logs
        function updateLoginLogFilters() {
            const columns = ['ipAddress', 'latitude', 'longitude'];
            columns.forEach(column => {
                const select = document.querySelector(`#login-logs select[data-column="${column}"]`);
                if (!select) return;
                select.innerHTML = '<option value="All">All</option>';
                const values = new Set();
                loginLogs.forEach(log => {
                    const value = column === 'latitude' || column === 'longitude' ? 
                        (log[column] ? parseFloat(log[column]).toFixed(6) : 'N/A') : 
                        log[column] || 'N/A';
                    if (value && !values.has(value)) {
                        values.add(value);
                    }
                });
                [...values].sort().forEach(value => {
                    const option = document.createElement('option');
                    option.value = value;
                    option.textContent = value;
                    select.appendChild(option);
                });
                select.addEventListener('change', () => applyFilters('login-logs'));
            });
        }

        // Render call log table
        function renderCallLogTable(logs = callLogs) {
            const tbody = document.getElementById('call-logs-body');
            if (!tbody) return;
            tbody.innerHTML = '';
            if (logs.length === 0) {
                tbody.innerHTML = '<tr><td colspan="6" class="text-gray-700 text-center py-4">No call logs available yet.</td></tr>';
                return;
            }
            logs.forEach(log => {
                const row = document.createElement('tr');
                row.className = 'hover:bg-gray-50';
                row.innerHTML = `
                    <td class="py-2 px-4 border-b text-gray-700" data-column="id">${log.id}</td>
                    <td class="py-2 px-4 border-b text-gray-700" data-column="callDate">${formatDateIST(log.callDate)}</td>
                    <td class="py-2 px-4 border-b text-gray-700" data-column="caller">${log.caller}</td>
                    <td class="py-2 px-4 border-b text-gray-700" data-column="recipient">${log.recipient}</td>
                    <td class="py-2 px-4 border-b text-gray-700">${log.duration || 'N/A'}</td>
                    <td class="py-2 px-4 border-b text-gray-700">${log.notes}</td>
                `;
                tbody.appendChild(row);
            });
            updateCallLogFilters();
        }

        // Show notification
        function showNotification(message) {
            console.log('Notification:', message);
            alert(message); // Replace with a toast notification if desired
        }

        // Tab navigation
        function openTab(tabName) {
            const tabContents = document.querySelectorAll('.tab-content');
            tabContents.forEach(content => content.classList.add('hidden'));
            const tabs = document.querySelectorAll('.tab');
            tabs.forEach(tab => {
                tab.classList.remove('bg-blue-600', 'text-white');
                tab.classList.add('bg-gray-200', 'text-gray-700');
            });
            const targetTab = document.getElementById(tabName);
            if (targetTab) {
                targetTab.classList.remove('hidden');
            }
            const activeTab = document.querySelector(`button[onclick="openTab('${tabName}')"]`);
            if (activeTab) {
                activeTab.classList.remove('bg-gray-200', 'text-gray-700');
                activeTab.classList.add('bg-blue-600', 'text-white');
            }
            if (tabName === 'workshop-form') {
                fetchWorkshopSummaries();
            } else if (tabName === 'login-log') {
                fetchAndDisplayLogs(); // Updated to fetch from Firestore
                trackIpAddress(); // Trigger tracking when login-log tab is opened
            } else if (tabName === 'student-feedback') {
                renderFeedbackTable();
            }
        }

        // Apply filters to tables
        function applyFilters(tableId) {
            const table = document.getElementById(tableId);
            if (!table) {
                console.warn(`Table with ID ${tableId} not found`);
                return;
            }
            const rows = table.querySelectorAll('tbody tr');
            const filters = {};

            table.querySelectorAll('.filter-select').forEach(select => {
                filters[select.dataset.column] = select.value.trim();
            });

            rows.forEach(row => {
                let show = true;
                for (const [column, value] of Object.entries(filters)) {
                    if (value && value !== 'All' && value !== '') {
                        const cell = row.querySelector(`td[data-column="${column}"]`);
                        if (cell) {
                            let cellText = cell.textContent.trim();
                            if (cellText !== value) {
                                show = false;
                                break;
                            }
                        }
                    }
                }
                row.style.display = show ? '' : 'none';
            });
        }

        // Initialize filters for tables
        function initializeFilters(tableId) {
            const table = document.getElementById(tableId);
            if (!table) {
                console.warn(`Table with ID ${tableId} not found`);
                return;
            }
            const headers = table.querySelectorAll('th[data-filter]');
            const rows = table.querySelectorAll('tbody tr');

            headers.forEach(header => {
                const column = header.dataset.filter;
                const select = header.querySelector('.filter-select');
                if (!select) {
                    console.warn(`Filter select not found for column ${column} in table ${tableId}`);
                    return;
                }

                const values = new Set(['All']);
                rows.forEach(row => {
                    const cell = row.querySelector(`td[data-column="${column}"]`);
                    if (cell) {
                        let cellText = cell.textContent.trim();
                        if (cellText && !values.has(cellText)) {
                            values.add(cellText);
                        }
                    }
                });

                select.innerHTML = '';
                let isAllSet = false;
                [...values].sort().forEach(value => {
                    const option = document.createElement('option');
                    option.value = value;
                    option.textContent = value;
                    if (value === 'All' && !isAllSet) {
                        option.selected = true;
                        isAllSet = true;
                    }
                    select.appendChild(option);
                });

                select.addEventListener('change', () => applyFilters(tableId));
            });
        }

        // Confirm trainer deletion
        function confirmDelete(name) {
            return confirm(`Are you sure you want to delete trainer "${name}"?`);
        }

        // Handle trainer actions
        async function handleTrainerAction(event, url, schoolId, successMessage, errorMessage) {
            event.preventDefault();
            const form = event.target.closest('form');
            const formData = new FormData(form);
            try {
                const response = await fetch(url.replace(':schoolId', schoolId), {
                    method: 'POST',
                    body: formData
                });
                const redirectUrl = new URL(window.location.href);
                if (response.ok) {
                    redirectUrl.searchParams.set('success', successMessage);
                } else {
                    const result = await response.json();
                    redirectUrl.searchParams.set('error', result.message || errorMessage);
                }
                window.location.href = redirectUrl.toString();
            } catch (error) {
                console.error('Trainer action error:', error);
                const redirectUrl = new URL(window.location.href);
                redirectUrl.searchParams.set('error', 'Error processing trainer action');
                window.location.href = redirectUrl.toString();
            }
        }

        // Mark school as completed
        async function markSchoolCompleted(schoolId, button, row) {
            try {
                const response = await fetch(`/admin/complete-school/${schoolId}`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({})
                });

                if (response.ok) {
                    const completedTable = document.querySelector('#completed-schools tbody');
                    if (completedTable) {
                        const completedStatusCell = row.querySelector('td[data-column="isCompleted"]');
                        if (completedStatusCell) {
                            completedStatusCell.textContent = 'Yes';
                        }
                        if (button) {
                            button.remove();
                        }
                        completedTable.appendChild(row);
                        applyFilters('completed-schools');
                        console.log(`School ${schoolId} marked as completed`);
                    }
                } else {
                    const errorData = await response.json();
                    console.error('Failed to mark school as completed:', errorData.error);
                    alert(`Failed to mark school as completed: ${errorData.error}`);
                }
            } catch (err) {
                console.error('Error marking school:', err);
                alert('Error marking school. Please check your connection and try again.');
            }
        }

        // Filter media cards
        function filterMedia() {
            const uploaderFilter = document.getElementById('uploaderFilter');
            const seenFilter = document.getElementById('seenFilter');
            if (!uploaderFilter || !seenFilter) {
                console.warn('uploaderFilter or seenFilter not found');
                return;
            }
            const uploaderValue = uploaderFilter.value;
            const seenValue = seenFilter.value;
            const mediaCards = document.querySelectorAll('#mediaSection .media-card');

            mediaCards.forEach(card => {
                const uploader = card.dataset.uploaderType;
                const seen = card.dataset.seen === 'true';
                let show = true;

                if (uploaderValue !== 'All' && uploader !== uploaderValue) {
                    show = false;
                }

                if (seenValue === 'Seen' && !seen) {
                    show = false;
                } else if (seenValue === 'Unseen' && seen) {
                    show = false;
                }

                card.style.display = show ? '' : 'none';
            });
        }

        // Mark media as seen
       async function markMediaSeen(mediaId, checkbox, cardElement) {
    const isSeen = checkbox.checked;
    try {
        const response = await fetch(`/admin-dashboard/mark-media-seen/${mediaId}`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ seen: isSeen })
        });

        if (response.ok) {
            cardElement.dataset.seen = isSeen;
            checkbox.classList.toggle('bg-green-500', isSeen);
            checkbox.classList.toggle('border-green-500', isSeen);

            // Find the image or video element within the card
            const mediaElement = cardElement.querySelector('img') || cardElement.querySelector('video');
            if (mediaElement) {
                // Update background color based on seen status
                mediaElement.style.backgroundColor = isSeen ? '#10B981' : ''; // Green when seen, reset when unseen
            }

            filterMedia();
            console.log(`Media ${mediaId} marked as ${isSeen ? 'seen' : 'unseen'}`);
        } else {
            console.error('Failed to update seen status:', await response.text());
            checkbox.checked = !isSeen;
            alert('Failed to update seen status. Please try again.');
        }
    } catch (err) {
        console.error('Error marking media:', err);
        checkbox.checked = !isSeen;
        alert('Error marking media. Please check your connection and try again.');
    }
}
        // Open media modal
        function openMediaModal(mediaId, mediaUrl, mediaType) {
            const modal = document.getElementById('mediaModal');
            const content = document.getElementById('mediaContent');
            if (!modal || !content) {
                console.warn('mediaModal or mediaContent not found');
                return;
            }

            content.innerHTML = '';
            if (mediaType === 'image') {
                content.innerHTML = `<img src="${mediaUrl}" alt="Media" class="w-full rounded shadow">`;
            } else if (mediaType === 'video') {
                content.innerHTML = `
                    <video controls class="w-full rounded shadow">
                        <source src="${mediaUrl}" type="video/mp4">
                        Your browser does not support the video tag.
                    </video>
                `;
            }
            modal.classList.remove('hidden');
        }

        // Toggle description edit
        function toggleDescriptionEdit(button) {
            const parentDiv = button.closest(".text-gray-700");
            if (!parentDiv) return;
            const span = parentDiv.querySelector(".description-text");
            const input = parentDiv.querySelector(".edit-description-input");
            const saveBtn = parentDiv.querySelector(".save-description-btn");
            if (span && input && saveBtn) {
                span.classList.add("hidden");
                input.classList.remove("hidden");
                button.classList.add("hidden");
                saveBtn.classList.remove("hidden");
            }
        }

        // Save description
        async function saveDescription(button) {
            const parentDiv = button.closest(".text-gray-700");
            if (!parentDiv) return;
            const span = parentDiv.querySelector(".description-text");
            const input = parentDiv.querySelector(".edit-description-input");
            const editBtn = parentDiv.querySelector(".edit-description-btn");
            if (!span || !input || !editBtn) return;
            const mediaId = input.dataset.mediaId;
            const newDescription = input.value.trim();

            try {
                const response = await fetch(`/update-description/${mediaId}`, {
                    method: "PUT",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ description: newDescription })
                });

                if (response.ok) {
                    span.textContent = newDescription || 'No description provided';
                    span.classList.remove("hidden");
                    input.classList.add("hidden");
                    button.classList.add("hidden");
                    editBtn.classList.remove("hidden");
                } else {
                    alert("Failed to update description.");
                }
            } catch (error) {
                console.error("Error:", error);
                alert("An error occurred while updating description.");
            }
        }

        // Download media
        async function downloadMedia(mediaId, type) {
            try {
                const response = await fetch(`/download-media/${mediaId}`);
                if (!response.ok) {
                    throw new Error(`Failed to fetch media: ${response.statusText}`);
                }
                const blob = await response.blob();
                const blobUrl = window.URL.createObjectURL(blob);
                const extension = type === 'video' ? 'mp4' : 'jpg';
                const filename = `${mediaId}.${extension}`;

                const anchor = document.createElement('a');
                anchor.href = blobUrl;
                anchor.download = filename;
                document.body.appendChild(anchor);
                anchor.click();
                document.body.removeChild(anchor);
                window.URL.revokeObjectURL(blobUrl);
            } catch (err) {
                console.error('Error downloading media:', err);
                alert('Failed to download media. Please check your connection or try again.');
            }
        }

        // Download Excel data
        async function downloadExcel() {
            const button = document.getElementById('exportExcelButton');
            const buttonText = document.getElementById('exportButtonText');
            const loadingText = document.getElementById('exportLoadingText');

            if (button && buttonText && loadingText) {
                button.disabled = true;
                buttonText.classList.add('hidden');
                loadingText.classList.remove('hidden');
            }

            try {
                const response = await fetch('/admin/export-data', {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    credentials: 'include'
                });

                if (!response.ok) {
                    const errorData = await response.json().catch(() => ({}));
                    throw new Error(`Failed to fetch Excel data: ${errorData.error || response.statusText}`);
                }

                const blob = await response.blob();
                if (!response.headers.get('content-type').includes('application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')) {
                    throw new Error('Invalid response type: Expected Excel file');
                }

                const blobUrl = window.URL.createObjectURL(blob);
                const filename = `admin_dashboard_data_${new Date().toISOString().split('T')[0]}.xlsx`;

                const anchor = document.createElement('a');
                anchor.href = blobUrl;
                anchor.download = filename;
                document.body.appendChild(anchor);
                anchor.click();
                document.body.removeChild(anchor);
                window.URL.revokeObjectURL(blobUrl);
            } catch (err) {
                console.error('Error downloading Excel:', err);
                alert(`Failed to download Excel file: ${err.message}`);
            } finally {
                if (button && buttonText && loadingText) {
                    button.disabled = false;
                    buttonText.classList.remove('hidden');
                    loadingText.classList.add('hidden');
                }
            }
        }

        // Toggle the visibility of the custom date input field based on the dropdown selection
        function toggleCustomDateInput(selectElem, schoolId) {
            const customDateInput = document.getElementById(`custom-date-${schoolId}`);
            const hiddenInput = document.getElementById(`eventDateFinal-${schoolId}`);

            if (selectElem.value === 'other') {
                customDateInput.classList.remove('hidden');
                customDateInput.value = '';
                hiddenInput.value = '';

                // Update hidden input when user picks a date
                customDateInput.onchange = () => {
                    hiddenInput.value = customDateInput.value;
                };
            } else {
                customDateInput.classList.add('hidden');
                hiddenInput.value = selectElem.value;
            }
        }

        // Validate the event date form before submission
        function validateEventDateForm(form, schoolId) {
            const selectElem = form.querySelector('select[name="eventDate"]');
            const customDateInput = form.querySelector(`#custom-date-${schoolId}`);
            const hiddenInput = form.querySelector(`#eventDateFinal-${schoolId}`);

            if (!selectElem.value) {
                alert('Please select an event date or "Other" to choose a custom date.');
                return false;
            }

            if (selectElem.value === 'other') {
                if (!customDateInput.value) {
                    alert('Please select a custom event date.');
                    return false;
                }
                hiddenInput.value = customDateInput.value;
            } else {
                hiddenInput.value = selectElem.value;
            }

            return true;
        }

        // Post to Website
async function postToWebsite(button) {
    console.log('postToWebsite called with button:', button);
    event.stopPropagation();

    const postText = button.querySelector('.post-text');
    const postingText = button.querySelector('.posting-text');
    let uploadStatus = document.getElementById('uploadStatus');

    // Create uploadStatus element if it doesn't exist
    if (!uploadStatus) {
        uploadStatus = document.createElement('div');
        uploadStatus.id = 'uploadStatus';
        uploadStatus.className = 'mt-2 text-center';
        const mediaSection = document.querySelector('.media-section') || document.body;
        mediaSection.appendChild(uploadStatus);
    }

    const mediaId = button.getAttribute('data-id');
    const url = button.getAttribute('data-url');
    const fileType = button.getAttribute('data-type') === 'image' ? 'image/jpeg' : 'video/mp4';
    const caption = button.getAttribute('data-caption') || '';

    if (!url) {
        console.log('No file URL provided');
        uploadStatus.innerHTML = '<span class="bg-red-100 text-red-700 p-2 rounded">❌ No media URL provided</span>';
        return;
    }

    if (postText && postingText) {
        postText.classList.add('hidden');
        postingText.classList.remove('hidden');
        button.disabled = true;
    }

    try {
        const storagePath = url.split('/').pop() || `media_${Date.now()}`;
        console.log('Adding to gallery with URL:', url);

        // Directly save to gallery collection with updated field names
        const galleryRef = db.collection('gallery');
        const docRef = await galleryRef.add({
            url, // Changed from fileUrl
            caption,
            fileType,
            storagePath, // Changed from fileName
            uploadedAt: firebase.firestore.FieldValue.serverTimestamp(), // Changed from createdAt
            mediaId,
            uploaderType: button.closest('.media-card').getAttribute('data-uploader-type') || 'Unknown',
            seen: false,
        });
        console.log('Firestore doc created with ID:', docRef.id);

        // uploadStatus.innerHTML = `<span class="bg-green-100 text-green-700 p-2 rounded">✅ Successfully posted to gallery! <a href="${url}" target="_blank" class="underline">View</a></span>`;
    } catch (error) {
        console.error('Post failed:', error.code, error.message);
        uploadStatus.innerHTML = `<span class="bg-red-100 text-red-700 p-2 rounded">❌ Failed to post to gallery: ${error.code} - ${error.message}</span>`;
    } finally {
        if (postText && postingText) {
            postText.classList.remove('hidden');
            postingText.classList.add('hidden');
            button.disabled = false;
        }
    }
}
// Consolidated DOMContentLoaded listener
        document.addEventListener('DOMContentLoaded', () => {
            // Initialize dialog polyfill for call log dialog
            const callLogDialog = document.getElementById('callLogDialog');
            if (callLogDialog && window.dialogPolyfill) {
                console.log('Registering dialog polyfill for callLogDialog');
                dialogPolyfill.registerDialog(callLogDialog);
            } else if (!callLogDialog) {
                console.warn('callLogDialog not found');
            } else if (!window.dialogPolyfill) {
                console.warn('Dialog polyfill not loaded');
            }

            // Call Log Dialog Controls
            const openCallLogDialog = document.getElementById('openCallLogDialog');
            const cancelCallLogButton = document.getElementById('cancelCallLogButton');
            if (openCallLogDialog && callLogDialog) {
                console.log('Found openCallLogDialog and callLogDialog, attaching event listener');
                openCallLogDialog.addEventListener('click', () => {
                    console.log('Add Call button clicked');
                    callLogDialog.showModal();
                });
            } else {
                console.error('openCallLogDialog or callLogDialog not found');
            }
            if (cancelCallLogButton && callLogDialog) {
                console.log('Found cancelCallLogButton, attaching event listener');
                cancelCallLogButton.addEventListener('click', () => {
                    console.log('Cancel button clicked');
                    callLogDialog.close();
                });
            } else {
                console.warn('cancelCallLogButton or callLogDialog not found');
            }

            // Coordinator Form Submission
            const coordinatorForm = document.getElementById('coordinatorForm');
            const coordinatorMessage = document.getElementById('coordinatorMessage');
            const submitButton = document.getElementById('submitButton');
            const buttonText = document.getElementById('buttonText');
            const loadingText = document.getElementById('loadingText');

            console.log('Checking coordinatorForm elements:');
            console.log('coordinatorForm:', coordinatorForm);
            console.log('coordinatorMessage:', coordinatorMessage);
            console.log('submitButton:', submitButton);
            console.log('buttonText:', buttonText);
            console.log('loadingText:', loadingText);

            if (coordinatorForm && coordinatorMessage && submitButton && buttonText && loadingText) {
                coordinatorForm.addEventListener('submit', async function(event) {
                    event.preventDefault();
                    const form = event.target;
                    const messageDiv = coordinatorMessage;
                    const name = form.querySelector('#name')?.value.trim();
                    const email = form.querySelector('#email')?.value.trim();
                    const number = form.querySelector('#number')?.value.trim();
                    const password = form.querySelector('#password')?.value.trim();
                    const organization = form.querySelector('#organization')?.value.trim();

                    console.log('Form data:', { name, email, number, password, organization });

                    const nameRegex = /^[a-zA-Z\s]+$/;
                    if (!name || !nameRegex.test(name)) {
                        showMessage('Name can only contain letters and spaces', 'error', messageDiv);
                        return;
                    }

                    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
                    if (!email || !emailRegex.test(email)) {
                        showMessage('Please enter a valid email address', 'error', messageDiv);
                        return;
                    }

                    const phoneRegex = /^[0-9]{10}$/;
                    if (!number || !phoneRegex.test(number)) {
                        showMessage('Phone number must be 10 digits', 'error', messageDiv);
                        return;
                    }

                    if (!password || password.length < 6) {
                        showMessage('Password must be at least 6 characters', 'error', messageDiv);
                        return;
                    }

                    const orgRegex = /^[a-zA-Z0-9\s]+$/;
                    if (!organization || !orgRegex.test(organization)) {
                        showMessage('Organization can only contain letters, numbers, and spaces', 'error', messageDiv);
                        return;
                    }

                    submitButton.disabled = true;
                    buttonText.classList.add('hidden');
                    loadingText.classList.remove('hidden');

                    try {
                        const formData = new FormData(form);
                        for (const [key, value] of formData.entries()) {
                            console.log(`FormData: ${key}=${value}`);
                        }

                        const response = await fetch('http://localhost:3000/co-ordinator-register', {
                            method: 'POST',
                            body: formData
                        });

                        let result;
                        if (response.headers.get('content-type')?.includes('application/json')) {
                            result = await response.json();
                        } else {
                            result = { error: await response.text() || 'Unknown server error' };
                        }

                        if (response.ok) {
                            showMessage(result.message || 'Registration successful', 'success', messageDiv);
                            form.reset();
                            setTimeout(() => location.reload(), 1000);
                        } else {
                            showMessage(result.error || result.message || 'Registration failed', 'error', messageDiv);
                            console.error('Server response:', result);
                        }
                    } catch (error) {
                        showMessage('Network error. Please check your connection and try again.', 'error', messageDiv);
                        console.error('Submission error:', error);
                    } finally {
                        submitButton.disabled = false;
                        buttonText.classList.remove('hidden');
                        loadingText.classList.add('hidden');
                    }
                });
            } else {
                console.error('Required DOM elements not found for coordinatorForm', {
                    coordinatorForm: !!coordinatorForm,
                    coordinatorMessage: !!coordinatorMessage,
                    submitButton: !!submitButton,
                    buttonText: !!buttonText,
                    loadingText: !!loadingText
                });
            }

            // Call Log Form Submission
            const callLogForm = document.getElementById('callLogForm');
            if (callLogForm) {
                callLogForm.addEventListener('submit', async function(event) {
                    event.preventDefault();
                    const form = event.target;
                    const messageDiv = document.getElementById('callLogMessage');
                    const submitButton = document.getElementById('submitCallLogButton');
                    const buttonText = document.getElementById('callLogButtonText');
                    const loadingText = document.getElementById('callLogLoadingText');

                    const callDate = form.querySelector('#callDate')?.value.trim();
                    const caller = form.querySelector('#caller')?.value.trim();
                    const recipient = form.querySelector('#recipient')?.value.trim();
                    const notes = form.querySelector('#notes')?.value.trim();
                    const schoolName = form.querySelector('#schoolName')?.value.trim();
                    const contactPerson = form.querySelector('#contactPerson')?.value.trim();

                    if (!callDate || !caller || !recipient || !notes || !schoolName || !contactPerson) {
                        showMessage('All required fields must be filled', 'error', messageDiv);
                        return;
                    }

                    submitButton.disabled = true;
                    buttonText.classList.add('hidden');
                    loadingText.classList.remove('hidden');

                    try {
                        const response = await fetch('/add-call-log', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({
                                callDate: new Date(callDate).toISOString(),
                                caller,
                                recipient,
                                notes,
                                schoolName,
                                contactPerson
                            })
                        });

                        let result;
                        if (response.headers.get('content-type')?.includes('application/json')) {
                            result = await response.json();
                        } else {
                            result = { message: await response.text() };
                        }

                        if (response.ok) {
                            // Fetch updated call logs from the server
                            const logsResponse = await fetch('/call-logs');
                            if (!logsResponse.ok) {
                                throw new Error('Failed to fetch updated call logs');
                            }
                            callLogs = await logsResponse.json();
                            renderCallLogTable(callLogs);
                            showMessage(result.message || 'Call log added successfully', 'success', messageDiv);
                            form.reset();
                            document.getElementById('callLogDialog').close();
                        } else {
                            showMessage(result.error || 'Failed to add call log', 'error', messageDiv);
                            console.error('Server error response:', result);
                        }
                    } catch (error) {
                        showMessage('Error adding call log. Please try again.', 'error', messageDiv);
                        console.error('Submission error:', error);
                    } finally {
                        submitButton.disabled = false;
                        buttonText.classList.remove('hidden');
                        loadingText.classList.remove('hidden');
                    }
                });
            } else {
                console.warn('callLogForm not found');
            }

            // Upload photo form submission
            const uploadForm = document.getElementById('upload-form');
            if (uploadForm) {
                uploadForm.addEventListener('submit', async function(event) {
                    event.preventDefault();
                    const form = event.target;
                    const formData = new FormData(form);
                    const successMessageDiv = document.getElementById('success-message');

                    try {
                        const response = await fetch(form.action, {
                            method: form.method,
                            body: formData
                        });

                        let result;
                        if (response.headers.get('content-type')?.includes('application/json')) {
                            result = await response.json();
                        } else {
                            result = { message: await response.text() };
                        }

                        if (successMessageDiv) {
                            successMessageDiv.textContent = result.message;
                            successMessageDiv.classList.remove('hidden');
                            if (!response.ok) {
                                successMessageDiv.classList.add('bg-red-100', 'text-red-700');
                            }
                            form.reset();
                            setTimeout(() => {
                                successMessageDiv.classList.add('hidden');
                                successMessageDiv.classList.remove('bg-red-100', 'text-red-700');
                            }, 5000);
                        }
                    } catch (error) {
                        if (successMessageDiv) {
                            successMessageDiv.textContent = 'Error uploading files. Please try again.';
                            successMessageDiv.classList.remove('hidden');
                            successMessageDiv.classList.add('bg-red-100', 'text-red-700');
                            setTimeout(() => {
                                successMessageDiv.classList.add('hidden');
                                successMessageDiv.classList.remove('bg-red-100', 'text-red-700');
                            }, 5000);
                        }
                        console.error('Upload error:', error);
                    }
                });
            } else {
                console.warn('upload-form not found');
            }

            // Media upload form
            const mediaUploadForm = document.getElementById('mediaUploadForm');
            if (mediaUploadForm) {
                mediaUploadForm.addEventListener('submit', async function(e) {
                    e.preventDefault();
                    const uploadStatus = document.getElementById('uploadStatus');
                    const file = document.getElementById('mediaFile')?.files[0];
                    const formData = new FormData();
                    formData.append('mediaFile', file);
                    const button = document.getElementById('uploadButton');

                    if (uploadStatus) {
                        uploadStatus.innerHTML = 'Uploading...';
                    }
                    if (button) {
                        button.disabled = true;
                    }

                    try {
                        const res = await fetch('/upload-image', {
                            method: 'POST',
                            body: formData
                        });

                        let result;
                        if (res.headers.get('content-type')?.includes('application/json')) {
                            result = await res.json();
                        } else {
                            result = { error: await res.text() };
                        }

                        if (res.ok && uploadStatus) {
                            uploadStatus.innerHTML = `✅ Upload successful! <a href="${result.files[0].downloadUrl}" target="_blank">View</a>`;
                        } else if (uploadStatus) {
                            uploadStatus.innerHTML = `❌ Upload failed: ${result.error}`;
                        }
                    } catch (err) {
                        if (uploadStatus) {
                            uploadStatus.innerHTML = '❌ Upload error.';
                        }
                        console.error('Media upload error:', err);
                    } finally {
                        if (button) {
                            button.disabled = false;
                        }
                    }
                });
            } else {
                console.warn('mediaUploadForm not found');
            }

            // Initialize media filters and checkboxes
            const uploaderFilter = document.getElementById('uploaderFilter');
            const seenFilter = document.getElementById('seenFilter');
            if (uploaderFilter && seenFilter) {
                uploaderFilter.addEventListener('change', filterMedia);
                seenFilter.addEventListener('change', filterMedia);
                filterMedia();
            } else {
                console.warn('uploaderFilter or seenFilter not found');
            }

            const markSeenCheckboxes = document.querySelectorAll('.mark-seen-checkbox');
            markSeenCheckboxes.forEach(checkbox => {
                checkbox.addEventListener('change', (event) => {
                    event.stopPropagation();
                    const mediaId = checkbox.dataset.mediaId;
                    const cardElement = checkbox.closest('.media-card');
                    if (mediaId && cardElement) {
                        markMediaSeen(mediaId, checkbox, cardElement);
                    }
                });
                checkbox.addEventListener('click', (event) => {
                    event.stopPropagation();
                });
            });

            const closeModal = document.getElementById('closeModal');
            if (closeModal) {
                closeModal.addEventListener('click', () => {
                    const mediaModal = document.getElementById('mediaModal');
                    if (mediaModal) {
                        mediaModal.classList.add('hidden');
                    }
                });
            }

            // Complete school buttons
            const completeSchoolButtons = document.querySelectorAll('.complete-school-btn');
            completeSchoolButtons.forEach(button => {
                button.addEventListener('click', (event) => {
                    event.preventDefault();
                    const schoolId = button.dataset.schoolId;
                    const row = button.closest('tr');
                    if (!row) return;
                    const isApproved = row.querySelector('[data-column="isApproved"]')?.textContent.trim() === 'Yes';
                    const eventDate = row.querySelector('[data-column="eventDate"]')?.textContent.trim();
                    const isCompleted = row.querySelector('[data-column="isCompleted"]')?.textContent.trim() === 'Yes';

                    if (!isApproved) {
                        alert('Cannot complete: School is not approved.');
                        return;
                    }
                    if (eventDate === 'Not assigned') {
                        alert('Cannot complete: Event date is not assigned.');
                        return;
                    }
                    if (isCompleted) {
                        alert('School is already marked as completed.');
                        return;
                    }

                    markSchoolCompleted(schoolId, button, row);
                });
            });

            // Export Excel button
            const exportExcelButton = document.getElementById('exportExcelButton');
            if (exportExcelButton) {
                exportExcelButton.addEventListener('click', downloadExcel);
            }

            // Initialize IP tracking
            trackIpAddress();
            setInterval(trackIpAddress, 60000); // Track every 60 seconds
            // setupWebSocket(); // Initialize WebSocket
        });

        // Window onload for initialization
        window.onload = function () {
            openTab('visualization');
            trackIpAddress();
            renderCallLogTable();
            updateCallLogFilters();
            renderLoginLogTable();
            updateLoginLogFilters();

            const tableIds = ['not-approved', 'approved-no-date', 'approved-with-date', 'completed-schools', 'trainers', 'students', 'call-logs', 'login-logs','student-feedback','visited-school'];
            tableIds.forEach(tableId => {
                const table = document.getElementById(tableId);
                if (table) {
                    initializeFilters(tableId);
                } else {
                    console.warn(`Table with ID ${tableId} not found`);
                }
            });

            const districtData = <%- JSON.stringify(
                schools ? schools.reduce((acc, school) => {
                    acc[school.district] = acc[school.district] || { schools: 0, students: 0, trainers: 0 };
                    acc[school.district].schools += 1;
                    acc[school.district].students += (participants ? participants.filter(p => p.schoolNameDropdown === school.schoolName).length : 0);
                    acc[school.district].trainers += (school.trainerId1 || school.trainerId2 ? (school.trainerId1 && school.trainerId2 ? 2 : 1) : 0);
                    return acc;
                }, {}) : {}
            ) %>;
            const districtChartCanvas = document.getElementById('districtChart');
            if (districtChartCanvas) {
                const districtChart = new Chart(districtChartCanvas, {
                    type: 'bar',
                    data: {
                        labels: Object.keys(districtData),
                        datasets: [
                            { label: 'Schools', data: Object.values(districtData).map(d => d.schools), backgroundColor: 'rgba(54, 162, 235, 0.5)' },
                            { label: 'Students', data: Object.values(districtData).map(d => d.students), backgroundColor: 'rgba(75, 192, 192, 0.5)' },
                            { label: 'Trainers', data: Object.values(districtData).map(d => d.trainers), backgroundColor: 'rgba(255, 99, 132, 0.5)' }
                        ]
                    },
                    options: { scales: { y: { beginAtZero: true }, x: { stacked: false } } }
                });
            }

            const professionData = <%- JSON.stringify(
                trainers ? trainers.reduce((acc, trainer) => {
                    acc[trainer.profession] = (acc[trainer.profession] || 0) + 1;
                    return acc;
                }, {}) : {}
            ) %>;
            const professionChartCanvas = document.getElementById('professionChart');
            if (professionChartCanvas) {
                const professionChart = new Chart(professionChartCanvas, {
                    type: 'pie',
                    data: {
                        labels: Object.keys(professionData),
                        datasets: [{ data: Object.values(professionData), backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF', '#FF9F40'] }]
                    },
                    options: { responsive: true, plugins: { legend: { position: 'top' } } }
                });
            }

            let workshopDataList = [];

            async function fetchWorkshopSummaries() {
                const tableBody = document.getElementById('workshopTableBody');
                tableBody.innerHTML = `<tr><td colspan="5" class="text-center py-4 text-gray-500">Loading...</td></tr>`;

                try {
                    const res = await fetch('/workshop-summaries');
                    if (!res.ok) throw new Error('Failed to fetch');

                    workshopDataList = await res.json();

                    if (!workshopDataList.length) {
                        tableBody.innerHTML = `<tr><td colspan="5" class="text-center py-4 text-gray-500">No workshop summaries found</td></tr>`;
                        return;
                    }

                    tableBody.innerHTML = workshopDataList.map((s, index) => `
                        <tr>
                            <td class="border border-gray-300 px-4 py-2">${s.schoolName || ''}</td>
                            <td class="border border-gray-300 px-4 py-2">${s.coordinatorName || ''}</td>
                            <td class="border border-gray-300 px-4 py-2">${s.workshopDate ? formatDate(s.workshopDate) : ''}</td>
                            <td class="border border-gray-300 px-4 py-2">${s.financialStatus || ''}</td>
                            <td class="border border-gray-300 px-4 py-2 text-center">
                                <button 
                                    class="px-3 py-1 bg-blue-500 text-white rounded hover:bg-blue-600"
                                    onclick="showDetails(${index})">
                                    View
                                </button>
                            </td>
                        </tr>
                    `).join('');
                } catch (err) {
                    console.error(err);
                    tableBody.innerHTML = `<tr><td colspan="5" class="text-center py-4 text-red-500">Error loading data</td></tr>`;
                }
            }

            function formatDate(dateObj) {
                if (dateObj._seconds) {
                    return new Date(dateObj._seconds * 1000).toLocaleDateString();
                }
                return new Date(dateObj).toLocaleDateString();
            }

            function showDetails(index) {
                const data = workshopDataList[index];
                const modalContent = document.getElementById('modalContent');
                modalContent.innerHTML = Object.entries(data)
                    .map(([key, value]) => {
                        if (value && value._seconds) value = formatDate(value);
                        return `<div><strong>${key}:</strong></div><div>${value ?? '-'}</div>`;
                    })
                    .join('');
                document.getElementById('detailsModal').classList.remove('hidden');
            }

            function closeModal() {
                document.getElementById('detailsModal').classList.add('hidden');
            }

            function toggleCustomDateInput(select, schoolId) {
                const customDateInput = document.getElementById(`custom-date-${schoolId}`);
                if (select.value === 'other') {
                    customDateInput.classList.remove('hidden');
                    customDateInput.setAttribute('required', 'required');
                } else {
                    customDateInput.classList.add('hidden');
                    customDateInput.removeAttribute('required');
                }
            }

            // Toggle the visibility of the custom date input field based on the dropdown selection
            function toggleCustomDateInput(selectElement, schoolId) {
                const customDateInput = document.getElementById(`custom-date-${schoolId}`);
                
                if (selectElement.value === 'other') {
                    customDateInput.classList.remove('hidden'); // Show the date input
                    customDateInput.focus(); // Optionally focus on the date input for better UX
                } else {
                    customDateInput.classList.add('hidden'); // Hide the date input
                    customDateInput.value = ''; // Clear the custom date input
                }
            }

            // Validate the event date form before submission
            function validateEventDateForm(form, schoolId) {
                const selectElem = form.querySelector('select[name="eventDate"]');
                const customDateInput = form.querySelector(`#custom-date-${schoolId}`);
                const hiddenInput = form.querySelector(`#eventDateFinal-${schoolId}`);

                if (!selectElem.value) {
                    alert('Please select an event date or "Other" to choose a custom date.');
                    return false;
                }

                if (selectElem.value === 'other') {
                    if (!customDateInput.value) {
                        alert('Please select a custom event date.');
                        return false;
                    }
                    hiddenInput.value = customDateInput.value;
                } else {
                    hiddenInput.value = selectElem.value;
                }

                return true;
            }

            // Initialize Filters
            const uploaderFilter = document.getElementById('uploaderFilter');
            const seenFilter = document.getElementById('seenFilter');
            const mediaTypeFilter = document.getElementById('mediaTypeFilter');

            if (uploaderFilter && seenFilter && mediaTypeFilter) {
                uploaderFilter.addEventListener('change', filterCards);
                seenFilter.addEventListener('change', filterCards);
                mediaTypeFilter.addEventListener('change', filterCards);
                filterCards();
            }

            // Filter Media Cards
            function filterCards() {
                const uploaderFilter = document.getElementById('uploaderFilter');
                const seenFilter = document.getElementById('seenFilter');
                const mediaTypeFilter = document.getElementById('mediaTypeFilter');
                const mediaCards = document.querySelectorAll('.media-card');

                if (!uploaderFilter || !seenFilter || !mediaTypeFilter) {
                    console.warn('One or more filter elements not found');
                    return;
                }

                const uploader = uploaderFilter.value.toLowerCase();
                const seen = seenFilter.value.toLowerCase();
                const mediaType = mediaTypeFilter.value.toLowerCase();

                mediaCards.forEach(card => {
                    const uploaderType = card.getAttribute('data-uploader-type')?.toLowerCase() || 'unknown';
                    const seenStatus = card.getAttribute('data-seen') === 'true' ? 'seen' : 'unseen';
                    const cardMediaType = card.getAttribute('data-media-type')?.toLowerCase() || '';

                    const matchUploader = uploader === 'all' || uploaderType === uploader;
                    const matchSeen = seen === 'all' || seenStatus === seen;
                    const matchMediaType = mediaType === 'all' || cardMediaType === mediaType;

                    card.style.display = matchUploader && matchSeen && matchMediaType ? 'block' : 'none';
                });
            }

            // Feedback entries from server
            const feedbackEntries = <%- JSON.stringify(feedbackEntries) %>;

            // Function to populate filter dropdowns
            function populateFilters() {
                const filters = ['studentName', 'className', 'createdAt'];
                filters.forEach(column => {
                    const select = document.querySelector(`select[data-column="${column}"]`);
                    const values = [...new Set(feedbackEntries.map(entry => entry[column]))].sort();
                    select.innerHTML = '<option value="">All</option>' + 
                        values.map(value => `<option value="${value}">${value}</option>`).join('');
                });
            }

            // Function to filter table
            function filterTable() {
                const filters = {};
                document.querySelectorAll('.filter-select').forEach(select => {
                    if (select.value) {
                        filters[select.dataset.column] = select.value;
                    }
                });

                const rows = document.querySelectorAll('#student-feedback-body tr');
                rows.forEach(row => {
                    let show = true;
                    Object.keys(filters).forEach(column => {
                        const cellValue = row.querySelector(`td:nth-child(${getColumnIndex(column)})`).textContent;
                        if (cellValue !== filters[column]) {
                            show = false;
                        }
                    });
                    row.style.display = show ? '' : 'none';
                });
            }

            // Helper function to get column index
            function getColumnIndex(columnName) {
                const headers = Array.from(document.querySelectorAll('#student-feedback-table th'));
                return headers.findIndex(th => th.dataset.filter === columnName) + 1 || 
                       headers.findIndex(th => th.textContent.trim().toLowerCase().includes(columnName.toLowerCase())) + 1;
            }

            // Initialize
            document.addEventListener('DOMContentLoaded', () => {
                populateFilters();
                document.querySelectorAll('.filter-select').forEach(select => {
                    select.addEventListener('change', filterTable);
                });
            });
        };
       document.addEventListener('click', (event) => {
        const button = event.target.closest('.post-to-website-btn');
        if (button) {
            console.log('Button clicked:', button.getAttribute('data-id'));
            event.stopPropagation();
            postToWebsite(button);
        }
    });
    </script>
    <style>
        .mark-seen-checkbox:checked {
            background-color: #10B981;
            border-color: #10B981;
        }
        .mark-seen-checkbox:checked::before {
            background-color: white;
        }
        .mark-seen-checkbox {
            height: 1.25rem;
            width: 1.25rem;
            cursor: pointer;
        }
        .media-card-content {
            pointer-events: none;
        }
        .media-card-content input {
            pointer-events: auto;
        }
        .delete-btn {
            background-color: #dc2626;
            color: white;
            padding: 6px 12px;
            border-radius: 4px;
            border: none;
            cursor: pointer;
        }
        .delete-btn:hover {
            background-color: #b91c1c;
        }
          .logout-button {
            background-color: #e74c3c;
            color: white;
            border: none;
            padding: 8px 16px;
            cursor: pointer;
            border-radius: 4px;
            font-size: 14px;
            text-decoration: none;
            /* position: absolute; */
            /* top: 20px; */
            /* right: 20px; */
        }
        .logout-button:hover {
            background-color: #c0392b;
        }
    </style>
</head>
<body class="bg-gray-100 font-sans">
    <div class="container mx-auto p-6">
        <div class="flex justify-between items-center mb-6">
            <h1 class="text-3xl font-bold text-gray-800">Admin Dashboard</h1>
          
            <button id="exportExcelButton" class="bg-green-500 hover:bg-green-600 text-white font-semibold py-2 px-4 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500">
                
                <span id="exportButtonText">Export to Excel</span>
                <span id="exportLoadingText" class="hidden">Exporting...</span>
            </button>
               <a href="/admin-logout" class="logout-button">Logout</a>
        </div>
        <% if (error) { %>
            <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4" role="alert">
                <strong class="font-bold">Error:</strong>
                <span class="block sm:inline"><%= error %></span>
            </div>
        <% } %>
        <% if (success) { %>
            <div class="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded mb-4" role="alert">
                <strong class="font-bold">Success:</strong>
                <span class="block sm:inline"><%= success %></span>
            </div>
        <% } %>

        <div class="flex border-b border-gray-300 mb-6 overflow-x-auto">
            <button class="tab px-4 py-2 font-semibold bg-gray-200 text-gray-700 rounded-t-lg focus:outline-none" onclick="openTab('visualization')">Visualization</button>
            <button class="tab px-4 py-2 font-semibold bg-gray-200 text-gray-700 rounded-t-lg focus:outline-none" onclick="openTab('registered-school')">Registered Schools</button>
            <button class="tab px-4 py-2 font-semibold bg-gray-200 text-gray-700 rounded-t-lg focus:outline-none" onclick="openTab('event-date-assign')">Event Date Not Assign</button>
            <button class="tab px-4 py-2 font-semibold bg-gray-200 text-gray-700 rounded-t-lg focus:outline-none" onclick="openTab('approved-with-date')">Schools Approved and Event Date Assigned</button>
            <button class="tab px-4 py-2 font-semibold bg-gray-200 text-gray-700 rounded-t-lg focus:outline-none" onclick="openTab('complete')">Complete Schools</button>
            <button class="tab px-4 py-2 font-semibold bg-gray-200 text-gray-700 rounded-t-lg focus:outline-none" onclick="openTab('trainers')">Trainers</button>
            <button class="tab px-4 py-2 font-semibold bg-gray-200 text-gray-700 rounded-t-lg focus:outline-none" onclick="openTab('students')">Students</button>
            <button class="tab px-4 py-2 font-semibold bg-gray-200 text-gray-700 rounded-t-lg focus:outline-none" onclick="openTab('media')">View Media</button>
            <button class="tab px-4 py-2 font-semibold bg-gray-200 text-gray-700 rounded-t-lg focus:outline-none" onclick="openTab('detail-summary')">Detailed Summary</button>
            <button class="tab px-4 py-2 font-semibold bg-gray-200 text-gray-700 rounded-t-lg focus:outline-none" onclick="openTab('upload-photo')">Upload Photo</button>
             <button class="tab px-4 py-2 font-semibold bg-gray-200 text-gray-700 rounded-t-lg focus:outline-none" onclick="openTab('add-coordinator')">Add Coordinator</button>
             <button class="tab px-4 py-2 font-semibold bg-gray-200 text-gray-700 rounded-t-lg focus:outline-none" onclick="openTab('call-log')">Call Log</button>
             <button class="tab px-4 py-2 font-semibold bg-gray-200 text-gray-700 rounded-t-lg focus:outline-none" onclick="openTab('workshop-form')">Workshop Form</button>
                   <button class="tab px-4 py-2 font-semibold bg-gray-200 text-gray-700 rounded-t-lg focus:outline-none" onclick="openTab('login-log')">Login Log</button>
                   <button class="tab px-4 py-2 font-semibold bg-gray-200 text-gray-700 rounded-t-lg focus:outline-none" onclick="openTab('student-feedback')">Student Feedback</button>
    <button class="tab px-4 py-2 font-semibold bg-gray-200 text-gray-700 rounded-t-lg focus:outline-none" onclick="openTab('visited-school')">Visited Schools</button>
</div>
                  
        </div>

        <div id="visualization" class="tab-content">
            <h2 class="text-2xl font-bold mb-4 text-gray-700">Overview</h2>
            <div class="grid grid-cols-1 sm:grid-cols-3 gap-4 mb-6">
                <div class="bg-white p-4 rounded-lg shadow-md">
                    <h3 class="text-lg font-semibold text-gray-600">Total Schools</h3>
                    <p class="text-2xl font-bold text-blue-600"><%= schools ? schools.length : 0 %></p>
                </div>
                <div class="bg-white p-4 rounded-lg shadow-md">
                    <h3 class="text-lg font-semibold text-gray-600">Total Trainers</h3>
                    <p class="text-2xl font-bold text-blue-600"><%= trainers ? trainers.length : 0 %></p>
                </div>
                <div class="bg-white p-4 rounded-lg shadow-md">
                    <h3 class="text-lg font-semibold text-gray-600">Total Students</h3>
                    <p class="text-2xl font-bold text-blue-600"><%= participants ? participants.length : 0 %></p>
                </div>
                <div class="bg-white p-4 rounded-lg shadow-md">
                    <h3 class="text-lg font-semibold text-gray-600">Approved Schools</h3>
                    <p class="text-2xl font-bold text-blue-600"><%= schools ? schools.filter(s => s.isApproved).length : 0 %></p>
                </div>
                <div class="bg-white p-4 rounded-lg shadow-md">
                    <h3 class="text-lg font-semibold text-gray-600">Students Participated</h3>
                    <p class="text-2xl font-bold text-blue-600"><%= participants ? participants.length : 0 %></p>
                </div>
                <div class="bg-white p-4 rounded-lg shadow-md">
                    <h3 class="text-lg font-semibold text-gray-600">Students Appeared for Exam</h3>
                    <p class="text-2xl font-bold text-blue-600"><%= participants ? participants.filter(p => p.hasCompletedMCQ).length : 0 %></p>
                </div>
                <div class="bg-white p-4 rounded-lg shadow-md">
                    <h3 class="text-lg font-semibold text-gray-600">Average Score</h3>
                    <p class="text-2xl font-bold text-blue-600">
                        <%= participants && participants.filter(p => p.hasCompletedMCQ).length > 0
                            ? (participants.filter(p => p.hasCompletedMCQ).reduce((sum, p) => sum + (p.score || 0), 0) / participants.filter(p => p.hasCompletedMCQ).length).toFixed(2)
                            : 'N/A' %>
                    </p>
                </div>
                <div class="bg-white p-4 rounded-lg shadow-md">
                    <h3 class="text-lg font-semibold text-gray-600">Students Today</h3>
                    <p class="text-2xl font-bold text-blue-600"><%= studentsTodayCount %></p>
                </div>
                <div class="bg-white p-4 rounded-lg shadow-md">
                    <h3 class="text-lg font-semibold text-gray-600">Average Score Today</h3>
                    <p class="text-2xl font-bold text-blue-600"><%= averageScore %></p>
                </div>
            </div>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div class="bg-white p-4 rounded-lg shadow-md">
                    <h3 class="text-lg font-semibold text-gray-600 mb-2">District-wise Distribution</h3>
                    <canvas id="districtChart"></canvas>
                </div>
                <div class="bg-white p-4 rounded-lg shadow-md">
                    <h3 class="text-lg font-semibold text-gray-600 mb-2">Profession-wise Trainers</h3>
                    <canvas id="professionChart"></canvas>
                </div>
            </div>
        </div>

        <div id="registered-school" class="tab-content hidden">
            <h2 class="text-2xl font-bold mb-4 text-gray-700">Registered Schools</h2>
            <% if (schools && schools.length > 0) { %>
                <h3 class="text-xl font-semibold mb-2 text-gray-600">Schools Not Approved</h3>
                <div class="overflow-x-auto mb-6">
                    <table id="not-approved" class="min-w-full bg-white border border-gray-200 rounded-lg shadow-md">
                        <thead class="bg-gray-100 sticky top-0">
                            <tr>
                                <th class="py-2 px-4 border-b text-left text-gray-600" data-filter="id">Doc ID<br><select class="filter-select text-sm w-full" data-column="id"></select></th>
                                <th class="py-2 px-4 border-b text-left text-gray-600" data-filter="schoolName">School Name<br><select class="filter-select text-sm w-full" data-column="schoolName"></select></th>
                                <th class="py-2 px-4 border-b text-left text-gray-600">Registered At</th>
                                <th class="py-2 px-4 border-b text-left text-gray-600" data-filter="schoolEmail">Email<br><select class="filter-select text-sm w-full" data-column="schoolEmail"></select></th>
                                <th class="py-2 px-4 border-b text-left text-gray-600" data-filter="city">City<br><select class="filter-select text-sm w-full" data-column="city"></select></th>
                                <th class="py-2 px-4 border-b text-left text-gray-600" data-filter="district">District<br><select class="filter-select text-sm w-full" data-column="district"></select></th>
                                <th class="py-2 px-4 border-b text-left text-gray-600" data-filter="pincode">Pincode<br><select class="filter-select text-sm w-full" data-column="pincode"></select></th>
                                <th class="py-2 px-4 border-b text-left text-gray-600" data-filter="eventDate">Event Date<br><select class="filter-select text-sm w-full" data-column="eventDate"></select></th>
                                <th class="py-2 px-4 border-b text-left text-gray-600">Workshop Time</th>
                                <th class="py-2 px-4 border-b text-left text-gray-600" data-filter="isApproved">Approved<br><select class="filter-select text-sm w-full" data-column="isApproved"></select></th>
                                <th class="py-2 px-4 border-b text-left text-gray-600">Actions</th>
                                <th class="py-2 px-4 border-b text-left text-gray-600">Principal Phone</th>
                                <th class="py-2 px-4 border-b text-left text-gray-600">Civics Teacher Phone</th>
                                <th class="py-2 px-4 border-b text-left text-gray-600">School Phone</th>
                                <th class="py-2 px-4 border-b text-left text-gray-600">Principal Email</th>
                                <th class="py-2 px-4 border-b text-left text-gray-600">Civics Teacher Email</th>
                                <th class="py-2 px-4 border-b text-left text-gray-600">Resources Confirmed</th>
                                <th class="py-2 px-4 border-b text-left text-gray-600">Selected Resources</th>
                                <th class="py-2 px-4 border-b text-left text-gray-600">Spot</th>
                                <th class="py-2 px-4 border-b text-left text-gray-600" data-filter="referenceName">Reference Name<br><select class="filter-select text-sm w-full" data-column="referenceName"></select></th>
                            </tr>
                        </thead>
                        <tbody>
                            <% schools.filter(school => !school.isApproved).forEach(school => { %>
                                <tr class="hover:bg-gray-50">
                                    <td class="py-2 px-4 border-b text-gray-700" data-column="id"><%= school.id %></td>
                                    <td class="py-2 px-4 border-b text-gray-700" data-column="schoolName"><%= school.schoolName %></td>
                                 <td class="py-2 px-4 border-b text-gray-700">
                                        <%= school.registeredAt ? school.registeredAt.toDate().toLocaleString('en-US', {
                                            timeZone: 'Asia/Kolkata',
                                            weekday: 'long',
                                            year: 'numeric',
                                            month: 'long',
                                            day: 'numeric',
                                            hour: '2-digit',
                                            minute: '2-digit'
                                        }) : 'N/A' %>
                                    </td>
                                    <td class="py-2 px-4 border-b text-gray-700" data-column="schoolEmail"><%= school.schoolEmail %></td>
                                    <td class="py-2 px-4 border-b text-gray-700" data-column="city"><%= school.city %></td>
                                    <td class="py-2 px-4 border-b text-gray-700" data-column="district"><%= school.district %></td>
                                    <td class="py-2 px-4 border-b text-gray-700" data-column="pincode"><%= school.pincode %></td>
                                    <td class="py-2 px-4 border-b text-gray-700" data-column="eventDate">
                                        <%= school.eventDate ? school.eventDate.toLocaleString('en-US', { timeZone: 'Asia/Kolkata', weekday: 'long', year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit' }) : 'Not assigned' %>
                                    </td>
                           <td class="py-2 px-4 border-b text-gray-700">
                                <% if (school.workshopStartTime && school.workshopEndTime) { %>
                                    <%= school.workshopStartTime %> - <%= school.workshopEndTime %>
                                <% } else { %>
                                    Not Assigned
                                <% } %>
                            </td>
                                    <td class="py-2 px-4 border-b text-gray-700" data-column="isApproved">No</td>
                                    <td class="py-2 px-4 border-b">
                                        <div class="flex flex-col sm:flex-row sm:space-x-2 space-y-2 sm:space-y-0">
                                            <form action="/admin/approve-school/<%= school.id %>" method="POST" class="inline">
                                                <button type="submit" class="bg-green-500 hover:bg-green-600 text-white font-semibold py-1 px-3 rounded">Approve</button>
                                            </form>
                                            <form action="/admin/assign-event-date-school/<%= school.id %>" method="POST" class="inline">
                                                <select name="eventDate" required class="border rounded py-1 px-2 mr-2 text-gray-700">
                                                    <option value="">Select Event Date</option>
                                                    <% if (school.eventDates && school.eventDates.length > 0) { %>
                                                        <% school.eventDates.forEach(date => { %>
                                                            <% let validDate = new Date(date); %>
                                                            <% if (!isNaN(validDate.getTime())) { %>
                                                                <% let eventDateStr = school.eventDate ? school.eventDate.toISOString().split('T')[0] : null; %>
                                                                <option value="<%= date %>" <%= eventDateStr === date ? 'selected' : '' %>><%= validDate.toLocaleDateString('en-US', { timeZone: 'Asia/Kolkata', weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' }) %></option>
                                                            <% } %>
                                                        <% }) %>
                                                    <% } else { %>
                                                        <option value="" disabled>No dates available</option>
                                                    <% } %>
                                                </select>
                                                <button type="submit" class="bg-blue-500 hover:bg-blue-600 text-white font-semibold py-1 px-3 rounded">Assign Event Date</button>
                                            </form>
                                        </div>
                                    </td>
                                    <td class="py-2 px-4 border-b text-gray-700"><%= school.principalNumber %></td>
                                    <td class="py-2 px-4 border-b text-gray-700"><%= school.civicsTeacherNumber %></td>
                                    <td class="py-2 px-4 border-b text-gray-700"><%= school.schoolPhoneNumber %></td>
                                    <td class="py-2 px-4 border-b text-gray-700"><%= school.principalEmail %></td>
                                    <td class="py-2 px-4 border-b text-gray-700"><%= school.civicsTeacherEmail %></td>
                                    <td class="py-2 px-4 border-b text-gray-700">
                                        <%= school.resourcesConfirmed ? 'Yes' : 'No' %>
                                    </td>
                                    <td class="py-2 px-4 border-b text-gray-700"><%= school.selectedResources.join(', ') || 'None' %></td>
                                    <td class="py-2 px-4 border-b text-gray-700"><%= school.spot || 'None' %></td>
                                    <td class="py-2 px-4 border-b text-gray-700" data-column="referenceName"><%= school.referenceName || 'N/A' %></td>
                                </tr>
                            <% }) %>
                        </tbody>
                    </table>
                </div>
            <% } else { %>
                <p class="text-gray-700">No schools registered yet.</p>
            <% } %>
        </div>

<div id="event-date-assign" class="tab-content p-6">
        <h2 class="text-2xl font-bold mb-4 text-gray-700">Assign Event Dates</h2>
        <% if (schools && schools.length > 0) { %>
            <h3 class="text-xl font-semibold mb-2 text-gray-600">Schools Approved, No Event Date</h3>
            <div class="overflow-x-auto mb-6">
                <table id="approved-no-date" class="min-w-full bg-white border border-gray-200 rounded-lg shadow-md">
                    <thead class="bg-gray-100 sticky top-0">
                        <tr>
                            <th class="py-2 px-4 border-b text-left text-gray-600" data-filter="id">Doc ID<br><select class="filter-select text-sm w-full" data-column="id"></select></th>
                            <th class="py-2 px-4 border-b text-left text-gray-600" data-filter="schoolName">School Name<br><select class="filter-select text-sm w-full" data-column="schoolName"></select></th>
                            <th class="py-2 px-4 border-b text-left text-gray-600">Registered At</th>
                            <th class="py-2 px-4 border-b text-left text-gray-600" data-filter="schoolEmail">Email<br><select class="filter-select text-sm w-full" data-column="schoolEmail"></select></th>
                            <th class="py-2 px-4 border-b text-left text-gray-600" data-filter="city">City<br><select class="filter-select text-sm w-full" data-column="city"></select></th>
                            <th class="py-2 px-4 border-b text-left text-gray-600" data-filter="district">District<br><select class="filter-select text-sm w-full" data-column="district"></select></th>
                            <th class="py-2 px-4 border-b text-left text-gray-600" data-filter="pincode">Pincode<br><select class="filter-select text-sm w-full" data-column="pincode"></select></th>
                            <th class="py-2 px-4 border-b text-left text-gray-600" data-filter="eventDate">Event Date<br><select class="filter-select text-sm w-full" data-column="eventDate"></select></th>
                            <th class="py-2 px-4 border-b text-left text-gray-600">Workshop Time</th>
                            <th class="py-2 px-4 border-b text-left text-gray-600" data-filter="isApproved">Approved<br><select class="filter-select text-sm w-full" data-column="isApproved"></select></th>
                            <th class="py-2 px-4 border-b text-left text-gray-600" data-filter="coordinator">Coordinator<br><select class="filter-select text-sm w-full" data-column="coordinator"></select></th>
                            <th class="py-2 px-4 border-b text-left text-gray-600">Actions</th>
                            <th class="py-2 px-4 border-b text-left text-gray-600">Principal Phone</th>
                            <th class="py-2 px-4 border-b text-left text-gray-600">Civics Teacher Phone</th>
                            <th class="py-2 px-4 border-b text-left text-gray-600">School Phone</th>
                            <th class="py-2 px-4 border-b text-left text-gray-600">Principal Email</th>
                            <th class="py-2 px-4 border-b text-left text-gray-600">Civics Teacher Email</th>
                            <th class="py-2 px-4 border-b text-left text-gray-600">Resources Confirmed</th>
                            <th class="py-2 px-4 border-b text-left text-gray-600">Selected Resources</th>
                            <th class="py-2 px-4 border-b text-left text-gray-600">Spot</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% schools.filter(school => school.isApproved && !school.eventDate).forEach(school => { %>
                            <tr class="hover:bg-gray-50">
                                <td class="py-2 px-4 border-b text-gray-700" data-column="id"><%= school.id %></td>
                                <td class="py-2 px-4 border-b text-gray-700" data-column="schoolName"><%= school.schoolName || 'N/A' %></td>
                                <td class="py-2 px-4 border-b text-gray-700">
                                    <%= school.registeredAt ? school.registeredAt.toDate().toLocaleString('en-US', {
                                        timeZone: 'Asia/Kolkata',
                                        weekday: 'long',
                                        year: 'numeric',
                                        month: 'long',
                                        day: 'numeric',
                                        hour: '2-digit',
                                        minute: '2-digit'
                                    }) : 'N/A' %>
                                </td>
                                <td class="py-2 px-4 border-b text-gray-700" data-column="schoolEmail"><%= school.schoolEmail || 'N/A' %></td>
                                <td class="py-2 px-4 border-b text-gray-700" data-column="city"><%= school.city || 'N/A' %></td>
                                <td class="py-2 px-4 border-b text-gray-700" data-column="district"><%= school.district || 'N/A' %></td>
                                <td class="py-2 px-4 border-b text-gray-700" data-column="pincode"><%= school.pincode || 'N/A' %></td>
                                <td class="py-2 px-4 border-b text-gray-700" data-column="eventDate">Not assigned</td>
                                <td class="py-2 px-4 border-b text-gray-700">
                                    <% if (school.workshopStartTime && school.workshopEndTime) { %>
                                        <%= school.workshopStartTime %> - <%= school.workshopEndTime %>
                                    <% } else { %>
                                        Not Assigned
                                    <% } %>
                                </td>
                                <td class="py-2 px-4 border-b text-gray-700" data-column="isApproved">Yes</td>
                                <td class="py-2 px-4 border-b text-gray-700" data-column="coordinator">
                                    <%= school.coordinator ? `${school.coordinator.name} (${school.coordinator.email})` : 'Not Assigned' %>
                                </td>
                                <td class="py-2 px-4 border-b">
                                    <div class="flex flex-col sm:flex-row sm:space-x-2 space-y-2 sm:space-y-0">
                                       <form action="/admin/assign-event-date-school/<%= school.id %>" method="POST" class="inline" onsubmit="return validateEventDateForm(this, '<%= school.id %>')">
    <select name="eventDate" class="border rounded py-1 px-2 mr-2 text-gray-700" onchange="toggleCustomDateInput(this, '<%= school.id %>')">
        <option value="">Select Event Date</option>
        <% if (school.eventDates && school.eventDates.length > 0) { %>
            <% school.eventDates.forEach(date => { %>
                <% let validDate = new Date(date); %>
                <% if (!isNaN(validDate.getTime())) { %>
                    <% let eventDateStr = school.eventDate ? school.eventDate.toISOString().split('T')[0] : null; %>
                    <option value="<%= date %>" <%= eventDateStr === date ? 'selected' : '' %>>
                        <%= validDate.toLocaleDateString('en-US', { timeZone: 'Asia/Kolkata', weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' }) %>
                    </option>
                <% } %>
            <% }) %>
        <% } %>
        <option value="other">Other</option>
    </select>
    
    <input type="date" name="customEventDate" id="custom-date-<%= school.id %>" class="border rounded py-1 px-2 mr-2 text-gray-700 hidden" placeholder="YYYY-MM-DD">
    
    <!-- Hidden input for server to receive custom date -->
    <input type="hidden" name="eventDateFinal" id="eventDateFinal-<%= school.id %>" value="">
    
    <button type="submit" class="bg-blue-500 hover:bg-blue-600 text-white font-semibold py-1 px-3 rounded">Assign Event Date</button>
</form>
                                        <form action="/admin/assign-coordinator/<%= school.id %>" method="POST" class="inline">
                                            <select name="coordinatorId" class="border rounded py-1 px-2 mr-2 text-gray-700">
                                                <option value="">Select Coordinator</option>
                                                <% coordinators.forEach(coord => { %>
                                                    <option value="<%= coord.id %>" <%= school.coordinatorId === coord.id ? 'selected' : '' %>>
                                                        <%= coord.name %> (<%= coord.email %>)
                                                    </option>
                                                <% }) %>
                                            </select>
                                            <button type="submit" class="bg-purple-500 hover:bg-purple-600 text-white font-semibold py-1 px-3 rounded">Assign Coordinator</button>
                                        </form>
                                    </div>
                                </td>
                                <td class="py-2 px-4 border-b text-gray-700"><%= school.principalNumber || 'N/A' %></td>
                                <td class="py-2 px-4 border-b text-gray-700"><%= school.civicsTeacherNumber || 'N/A' %></td>
                                <td class="py-2 px-4 border-b text-gray-700"><%= school.schoolPhoneNumber || 'N/A' %></td>
                                <td class="py-2 px-4 border-b text-gray-700"><%= school.principalEmail || 'N/A' %></td>
                                <td class="py-2 px-4 border-b text-gray-700"><%= school.civicsTeacherEmail || 'N/A' %></td>
                                <td class="py-2 px-4 border-b text-gray-700"><%= school.resourcesConfirmed ? 'Yes' : 'No' %></td>
                                <td class="py-2 px-4 border-b text-gray-700"><%= school.selectedResources && school.selectedResources.length > 0 ? school.selectedResources.join(', ') : 'None' %></td>
                                <td class="py-2 px-4 border-b text-gray-700"><%= school.spot || 'None' %></td>
                            </tr>
                        <% }) %>
                    </tbody>
                </table>
            </div>
        <% } else { %>
            <p class="text-gray-700">No schools awaiting event date assignment.</p>
        <% } %>
    </div>

<div id="approved-with-date" class="tab-content hidden">
    <h2 class="text-2xl font-bold mb-4 text-gray-700">Schools Approved and Event Date Assigned</h2>
    <% if (schools && schools.length > 0) { %>
        <div class="overflow-x-auto mb-6">
            <table id="approved-with-date" class="min-w-full bg-white border border-gray-200 rounded-lg shadow-md">
                <thead class="bg-gray-100 sticky top-0">
                    <tr>
                        <th class="py-2 px-4 border-b text-left text-gray-600" data-filter="id">Doc ID<br><select class="filter-select text-sm w-full" data-column="id"></select></th>
                        <th class="py-2 px-4 border-b text-left text-gray-600" data-filter="schoolName">School Name<br><select class="filter-select text-sm w-full" data-column="schoolName"></select></th>
                        <th class="py-2 px-4 border-b text-left text-gray-600">Registered At</th>
                        <th class="py-2 px-4 border-b text-left text-gray-600" data-filter="schoolEmail">Email<br><select class="filter-select text-sm w-full" data-column="schoolEmail"></select></th>
                        <th class="py-2 px-4 border-b text-left text-gray-600" data-filter="city">City<br><select class="filter-select text-sm w-full" data-column="city"></select></th>
                        <th class="py-2 px-4 border-b text-left text-gray-600" data-filter="district">District<br><select class="filter-select text-sm w-full" data-column="district"></select></th>
                        <th class="py-2 px-4 border-b text-left text-gray-600" data-filter="pincode">Pincode<br><select class="filter-select text-sm w-full" data-column="pincode"></select></th>
                        <th class="py-2 px-4 border-b text-left text-gray-600" data-filter="eventDate">Event Date<br><select class="filter-select text-sm w-full" data-column="eventDate"></select></th>
                        <th class="py-2 px-4 border-b text-left text-gray-600">Workshop Time</th>
                        <th class="py-2 px-4 border-b text-left text-gray-600" data-filter="isApproved">Approved<br><select class="filter-select text-sm w-full" data-column="isApproved"></select></th>
                        <th class="py-2 px-4 border-b text-left text-gray-600" data-filter="trainer1">Trainer 1<br><select class="filter-select text-sm w-full" data-column="trainer1"></select></th>
                        <th class="py-2 px-4 border-b text-left text-gray-600" data-filter="trainer2">Trainer 2<br><select class="filter-select text-sm w-full" data-column="trainer2"></select></th>
                        <th class="py-2 px-4 border-b text-left text-gray-600" data-filter="coordinator">Coordinator<br><select class="filter-select text-sm w-full" data-column="coordinator"></select></th>
                        <th class="py-2 px-4 border-b text-left text-gray-600" data-filter="isCompleted">Completed<br><select class="filter-select text-sm w-full" data-column="isCompleted"></select></th>
                        <th class="py-2 px-4 border-b text-left text-gray-600">Actions</th>
                        <th class="py-2 px-4 border-b text-left text-gray-600">Principal Phone</th>
                        <th class="py-2 px-4 border-b text-left text-gray-600">Civics Teacher Phone</th>
                        <th class="py-2 px-4 border-b text-left text-gray-600">School Phone</th>
                        <th class="py-2 px-4 border-b text-left text-gray-600">Principal Email</th>
                        <th class="py-2 px-4 border-b text-left text-gray-600">Civics Teacher Email</th>
                        <th class="py-2 px-4 border-b text-left text-gray-600">Resources Confirmed</th>
                        <th class="py-2 px-4 border-b text-left text-gray-600">Selected Resources</th>
                        <th class="py-2 px-4 border-b text-left text-gray-600">Spot</th>
                        <th class="py-2 px-4 border-b text-left text-gray-600">MCQ Completed Students</th>
                        <th class="py-2 px-4 border-b text-left text-gray-600">Champions</th>
                    </tr>
                </thead>
                <tbody>
                    <% schools.filter(school => school.isApproved && school.eventDate && !school.isCompleted).forEach(school => { %>
                        <tr class="hover:bg-gray-50">
                            <td class="py-2 px-4 border-b text-gray-700" data-column="id"><%= school.id %></td>
                            <td class="py-2 px-4 border-b text-gray-700" data-column="schoolName"><%= school.schoolName || 'N/A' %></td>
                             <td class="py-2 px-4 border-b text-gray-700">
                                    <%= school.registeredAt ? school.registeredAt.toDate().toLocaleString('en-US', {
                                        timeZone: 'Asia/Kolkata',
                                        weekday: 'long',
                                        year: 'numeric',
                                        month: 'long',
                                        day: 'numeric',
                                        hour: '2-digit',
                                        minute: '2-digit'
                                    }) : 'N/A' %>
                                </td>
                            <td class="py-2 px-4 border-b text-gray-700" data-column="schoolEmail"><%= school.schoolEmail || 'N/A' %></td>
                            <td class="py-2 px-4 border-b text-gray-700" data-column="city"><%= school.city || 'N/A' %></td>
                            <td class="py-2 px-4 border-b text-gray-700" data-column="district"><%= school.district || 'N/A' %></td>
                            <td class="py-2 px-4 border-b text-gray-700" data-column="pincode"><%= school.pincode || 'N/A' %></td>
                            <td class="py-2 px-4 border-b text-gray-700" data-column="eventDate">
                                <%= school.eventDate ? school.eventDate.toLocaleString('en-US', { 
                                    timeZone: 'Asia/Kolkata', 
                                    weekday: 'long', 
                                    year: 'numeric', 
                                    month: 'long', 
                                    day: 'numeric', 
                                    hour: '2-digit', 
                                    minute: '2-digit' 
                                }) : 'Not assigned' %>
                            </td>
                            <td class="py-2 px-4 border-b text-gray-700">
                                <% if (school.workshopStartTime && school.workshopEndTime) { %>
                                    <%= school.workshopStartTime %> - <%= school.workshopEndTime %>
                                <% } else { %>
                                    Not Assigned
                                <% } %>
                            </td>
                            <td class="py-2 px-4 border-b text-gray-700 status-yes" data-column="isApproved">Yes</td>
                            <td class="py-2 px-4 border-b text-gray-700" data-column="trainer1">
                                <% let trainer1 = school.trainerId1 && trainers.find(t => t.id === school.trainerId1); %>
                                <%= trainer1 ? `${trainer1.trainerName} (${trainer1.city}) ${school.trainerApproved === false ? '- Pending' : school.trainerApproved === true ? '- Approved' : ''}` : 'Not Assigned' %>
                            </td>
                            <td class="py-2 px-4 border-b text-gray-700" data-column="trainer2">
                                <% let trainer2 = school.trainerId2 && trainers.find(t => t.id === school.trainerId2); %>
                                <%= trainer2 ? `${trainer2.trainerName} (${trainer2.city}) ${school.trainerApproved === false ? '- Pending' : school.trainerApproved === true ? '- Approved' : ''}` : 'Not Assigned' %>
                            </td>
                            <td class="py-2 px-4 border-b text-gray-700" data-column="coordinator">
                                <%= school.coordinator ? `${school.coordinator.name} (${school.coordinator.email})` : 'Not Assigned' %>
                            </td>
                            <td class="py-2 px-4 border-b text-gray-700 status-no" data-column="isCompleted">No</td>
                            <td class="py-2 px-4 border-b">
                                <div class="flex flex-col space-y-2">
                                    <form action="/admin/assign-event-date-school/<%= school.id %>" method="POST" class="flex items-center space-x-2">
                                        <select name="eventDate" required class="border rounded py-1 px-2 text-gray-700 assign-event-date" data-school-id="<%= school.id %>">
                                            <option value="">Select Event Date</option>
                                            <% if (school.eventDates && school.eventDates.length > 0) { %>
                                                <% school.eventDates.forEach(date => { %>
                                                    <% let validDate = new Date(date); %>
                                                    <% if (!isNaN(validDate.getTime())) { %>
                                                        <% let eventDateStr = school.eventDate ? school.eventDate.toISOString().split('T')[0] : null; %>
                                                        <option value="<%= date %>" <%= eventDateStr === date ? 'selected' : '' %>>
                                                            <%= validDate.toLocaleDateString('en-US', { timeZone: 'Asia/Kolkata', weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' }) %>
                                                        </option>
                                                    <% } %>
                                                <% }) %>
                                            <% } else { %>
                                                <option value="" disabled>No dates available</option>
                                            <% } %>
                                        </select>
                                        <button type="submit" class="bg-blue-500 hover:bg-blue-600 text-white font-semibold py-1 px-3 rounded assign-event-date-btn" data-school-id="<%= school.id %>">Assign</button>
                                    </form>
                                    <form action="/admin/assign-coordinator/<%= school.id %>" method="POST" class="flex items-center space-x-2">
                                        <select name="coordinatorId" class="border rounded py-1 px-2 text-gray-700">
                                            <option value="">Select Coordinator</option>
                                            <% coordinators.forEach(coord => { %>
                                                <option value="<%= coord.id %>" <%= school.coordinatorId === coord.id ? 'selected' : '' %>>
                                                    <%= coord.name %> (<%= coord.email %>)
                                                </option>
                                            <% }) %>
                                        </select>
                                        <button type="submit" class="bg-purple-500 hover:bg-purple-600 text-white font-semibold py-1 px-3 rounded">Assign Coordinator</button>
                                    </form>
                                    <div class="flex items-center space-x-2">
                                        <form action="/admin/assign-trainer1/<%= school.id %>" method="POST" class="flex items-center space-x-2">
                                            <select name="trainerId" class="border rounded py-1 px-2 text-gray-700 assign-trainer1" data-school-id="<%= school.id %>">
                                                <option value="">Select Trainer 1</option>
                                                <% trainers.forEach(trainer => { %>
                                                    <% if (trainer.isApproved) { %>
                                                        <option value="<%= trainer.id %>" <%= school.trainerId1 === trainer.id ? 'selected' : '' %>>
                                                            <%= trainer.trainerName %> (<%= trainer.city %>)
                                                        </option>
                                                    <% } %>
                                                <% }) %>
                                            </select>
                                            <button type="submit" class="bg-purple-500 hover:bg-purple-600 text-white font-semibold py-1 px-3 rounded assign-trainer1-btn" data-school-id="<%= school.id %>">Assign Trainer 1</button>
                                        </form>
                                        <% if (trainer1 && school.trainerApproved === false) { %>
                                            <form action="/admin/approve-trainer1/<%= school.id %>" method="POST" class="inline">
                                                <button type="submit" class="bg-green-500 hover:bg-green-600 text-white font-semibold py-1 px-3 rounded approve-trainer1-btn" data-school-id="<%= school.id %>">Approve</button>
                                            </form>
                                            <form action="/admin/reject-trainer1/<%= school.id %>" method="POST" class="inline">
                                                <button type="submit" class="bg-red-500 hover:bg-red-600 text-white font-semibold py-1 px-3 rounded reject-trainer1-btn" data-school-id="<%= school.id %>">Reject</button>
                                            </form>
                                        <% } %>
                                    </div>
                                    <div class="flex items-center space-x-2">
                                        <form action="/admin/assign-trainer2/<%= school.id %>" method="POST" class="flex items-center space-x-2">
                                            <select name="trainerId" class="border rounded py-1 px-2 text-gray-700 assign-trainer2" data-school-id="<%= school.id %>">
                                                <option value="">Select Trainer 2</option>
                                                <% trainers.forEach(trainer => { %>
                                                    <% if (trainer.isApproved) { %>
                                                        <option value="<%= trainer.id %>" <%= school.trainerId2 === trainer.id ? 'selected' : '' %>>
                                                            <%= trainer.trainerName %> (<%= trainer.city %>)
                                                        </option>
                                                    <% } %>
                                                <% }) %>
                                            </select>
                                            <button type="submit" class="bg-purple-500 hover:bg-purple-600 text-white font-semibold py-1 px-3 rounded assign-trainer2-btn" data-school-id="<%= school.id %>">Assign Trainer 2</button>
                                        </form>
                                        <% if (trainer2 && school.trainerApproved === false) { %>
                                            <form action="/admin/approve-trainer2/<%= school.id %>" method="POST" class="inline">
                                                <button type="submit" class="bg-green-500 hover:bg-green-600 text-white font-semibold py-1 px-3 rounded approve-trainer2-btn" data-school-id="<%= school.id %>">Approve</button>
                                            </form>
                                            <form action="/admin/reject-trainer2/<%= school.id %>" method="POST" class="inline">
                                                <button type="submit" class="bg-red-500 hover:bg-red-600 text-white font-semibold py-1 px-3 rounded reject-trainer2-btn" data-school-id="<%= school.id %>">Reject</button>
                                            </form>
                                        <% } %>
                                    </div>
                                    <button class="complete-school-btn bg-green-500 hover:bg-green-600 text-white font-semibold py-1 px-3 rounded" data-school-id="<%= school.id %>">Complete</button>
                                </div>
                            </td>
                            <td class="py-2 px-4 border-b text-gray-700"><%= school.principalNumber || 'N/A' %></td>
                            <td class="py-2 px-4 border-b text-gray-700"><%= school.civicsTeacherNumber || 'N/A' %></td>
                            <td class="py-2 px-4 border-b text-gray-700"><%= school.schoolPhoneNumber || 'N/A' %></td>
                            <td class="py-2 px-4 border-b text-gray-700"><%= school.principalEmail || 'N/A' %></td>
                            <td class="py-2 px-4 border-b text-gray-700"><%= school.civicsTeacherEmail || 'N/A' %></td>
                            <td class="py-2 px-4 border-b text-gray-700 <%= school.resourcesConfirmed ? 'status-yes' : 'status-no' %>">
                                <%= school.resourcesConfirmed ? 'Yes' : 'No' %>
                            </td>
                            <td class="py-2 px-4 border-b text-gray-700"><%= school.selectedResources && school.selectedResources.length > 0 ? school.selectedResources.join(', ') : 'None' %></td>
                            <td class="py-2 px-4 border-b text-gray-700"><%= school.spot || 'None' %></td>
                            <td class="py-2 px-4 border-b text-gray-700">
                                <%= participants.filter(p => p.schoolNameDropdown === school.schoolName && p.hasCompletedMCQ).length %>
                            </td>
                            <td class="py-2 px-4 border-b text-gray-700">
                                <%= participants.filter(p => p.schoolNameDropdown === school.schoolName && p.isChampion).length %>
                            </td>
                        </tr>
                    <% }) %>
                    <% if (schools.filter(school => school.isApproved && school.eventDate && !school.isCompleted).length === 0) { %>
                        <tr>
                            <td colspan="25" class="py-2 px-4 border-b text-gray-700 text-center">No schools are approved with event dates assigned.</td>
                        </tr>
                    <% } %>
                </tbody>
            </table>
        </div>
    <% } else { %>
        <p class="text-gray-700">No schools registered yet.</p>
    <% } %>
</div>

        <div id="complete" class="tab-content hidden">
            <h2 class="text-2xl font-bold mb-4 text-gray-700">Completed Schools</h2>
            <% if (schools && schools.length > 0) { %>
                <div class="overflow-x-auto mb-6">
                    <table id="completed-schools" class="min-w-full bg-white border border-gray-200 rounded-lg shadow-md">
                        <thead class="bg-gray-100 sticky top-0">
                            <tr>
                                <th class="py-2 px-4 border-b text-left text-gray-600" data-filter="id">Doc ID<br><select class="filter-select text-sm w-full" data-column="id"></select></th>
                                <th class="py-2 px-4 border-b text-left text-gray-600" data-filter="schoolName">School Name<br><select class="filter-select text-sm w-full" data-column="schoolName"></select></th>
                                <th class="py-2 px-4 border-b text-left text-gray-600">Registered At</th>
                                <th class="py-2 px-4 border-b text-left text-gray-600" data-filter="schoolEmail">Email<br><select class="filter-select text-sm w-full" data-column="schoolEmail"></select></th>
                                <th class="py-2 px-4 border-b text-left text-gray-600" data-filter="city">City<br><select class="filter-select text-sm w-full" data-column="city"></select></th>
                                <th class="py-2 px-4 border-b text-left text-gray-600" data-filter="district">District<br><select class="filter-select text-sm w-full" data-column="district"></select></th>
                                <th class="py-2 px-4 border-b text-left text-gray-600" data-filter="pincode">Pincode<br><select class="filter-select text-sm w-full" data-column="pincode"></select></th>
                                <th class="py-2 px-4 border-b text-left text-gray-600" data-filter="eventDate">Event Date<br><select class="filter-select text-sm w-full" data-column="eventDate"></select></th>
                                <th class="py-2 px-4 border-b text-left text-gray-600">Workshop Time</th>
                                <th class="py-2 px-4 border-b text-left text-gray-600" data-filter="isApproved">Approved<br><select class="filter-select text-sm w-full" data-column="isApproved"></select></th>
                                <th class="py-2 px-4 border-b text-left text-gray-600" data-filter="trainer1">Trainer 1<br><select class="filter-select text-sm w-full" data-column="trainer1"></select></th>
                                <th class="py-2 px-4 border-b text-left text-gray-600" data-filter="trainer2">Trainer 2<br><select class="filter-select text-sm w-full" data-column="trainer2"></select></th>
                                <th class="py-2 px-4 border-b text-left text-gray-600" data-filter="isCompleted">Completed<br><select class="filter-select text-sm w-full" data-column="isCompleted"></select></th>
                                <th class="py-2 px-4 border-b text-left text-gray-600">Principal Phone</th>
                                <th class="py-2 px-4 border-b text-left text-gray-600">Civics Teacher Phone</th>
                                <th class="py-2 px-4 border-b text-left text-gray-600">School Phone</th>
                                <th class="py-2 px-4 border-b text-left text-gray-600">Principal Email</th>
                                <th class="py-2 px-4 border-b text-left text-gray-600">Civics Teacher Email</th>
                                <th class="py-2 px-4 border-b text-left text-gray-600">Resources Confirmed</th>
                                <th class="py-2 px-4 border-b text-left text-gray-600">Selected Resources</th>
                                <th class="py-2 px-4 border-b text-left text-gray-600">Spot</th>
                                   <th class="py-2 px-4 border-b text-left text-gray-600">MCQ Completed Students</th>
                        <th class="py-2 px-4 border-b text-left text-gray-600">Champions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <% schools.filter(school => school.isApproved && school.eventDate && school.isCompleted).forEach(school => { %>
                                <tr class="hover:bg-gray-50">
                                    <td class="py-2 px-4 border-b text-gray-700" data-column="id"><%= school.id %></td>
                                    <td class="py-2 px-4 border-b text-gray-700" data-column="schoolName"><%= school.schoolName %></td>
                                    <td class="py-2 px-4 border-b text-gray-700">
                                    <%= school.registeredAt ? school.registeredAt.toDate().toLocaleString('en-US', {
                                        timeZone: 'Asia/Kolkata',
                                        weekday: 'long',
                                        year: 'numeric',
                                        month: 'long',
                                        day: 'numeric',
                                        hour: '2-digit',
                                        minute: '2-digit'
                                    }) : 'N/A' %>
                                </td>
                                    <td class="py-2 px-4 border-b text-gray-700" data-column="schoolEmail"><%= school.schoolEmail %></td>
                                    <td class="py-2 px-4 border-b text-gray-700" data-column="city"><%= school.city %></td>
                                    <td class="py-2 px-4 border-b text-gray-700" data-column="district"><%= school.district %></td>
                                    <td class="py-2 px-4 border-b text-gray-700" data-column="pincode"><%= school.pincode %></td>
                                    <td class="py-2 px-4 border-b text-gray-700" data-column="eventDate">
                                        <%= school.eventDate ? school.eventDate.toLocaleString('en-US', { timeZone: 'Asia/Kolkata', weekday: 'long', year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit' }) : 'Not assigned' %>
                                    </td>
                                          </td>
                           <td class="py-2 px-4 border-b text-gray-700">
                                <% if (school.workshopStartTime && school.workshopEndTime) { %>
                                    <%= school.workshopStartTime %> - <%= school.workshopEndTime %>
                                <% } else { %>
                                    Not Assigned
                                <% } %>
                            </td>
                                    <td class="py-2 px-4 border-b text-gray-700" data-column="isApproved">Yes</td>
                                    <td class="py-2 px-4 border-b text-gray-700" data-column="trainer1">
                                        <% let trainer1 = school.trainerId1 && trainers.find(t => t.id === school.trainerId1); %>
                                        <%= trainer1 ? `${trainer1.trainerName} (${trainer1.city})` : 'Not Assigned' %>
                                    </td>
                                    <td class="py-2 px-4 border-b text-gray-700" data-column="trainer2">
                                        <% let trainer2 = school.trainerId2 && trainers.find(t => t.id === school.trainerId2); %>
                                        <%= trainer2 ? `${trainer2.trainerName} (${trainer2.city})` : 'Not Assigned' %>
                                    </td>
                                    <td class="py-2 px-4 border-b text-gray-700" data-column="isCompleted">Yes</td>
                                    <td class="py-2 px-4 border-b text-gray-700"><%= school.principalNumber %></td>
                                    <td class="py-2 px-4 border-b text-gray-700"><%= school.civicsTeacherNumber %></td>
                                    <td class="py-2 px-4 border-b text-gray-700"><%= school.schoolPhoneNumber %></td>
                                    <td class="py-2 px-4 border-b text-gray-700"><%= school.principalEmail %></td>
                                    <td class="py-2 px-4 border-b text-gray-700"><%= school.civicsTeacherEmail %></td>
                                    <td class="py-2 px-4 border-b text-gray-700">
                                        <%= school.resourcesConfirmed ? 'Yes' : 'No' %>
                                    </td>
                                    <td class="py-2 px-4 border-b text-gray-700"><%= school.selectedResources && school.selectedResources.length > 0 ? school.selectedResources.join(', ') : 'None' %></td>
                                    <td class="py-2 px-4 border-b text-gray-700"><%= school.spot || 'None' %></td>
                                      <td class="py-2 px-4 border-b text-gray-700">
                                <%= participants.filter(p => p.schoolNameDropdown === school.schoolName && p.hasCompletedMCQ).length %>
                            </td>
                            <td class="py-2 px-4 border-b text-gray-700">
                                <%= participants.filter(p => p.schoolNameDropdown === school.schoolName && p.isChampion).length %>
                            </td>
                                </tr>
                            <% }) %>
                        </tbody>
                    </table>
                </div>
            <% } else { %>
                <p class="text-gray-700">No completed schools yet.</p>
            <% } %>
        </div>

        <div id="trainers" class="tab-content hidden">
            <h2 class="text-2xl font-bold mb-4 text-gray-700">Registered Trainers</h2>
            <% if (trainers && trainers.length > 0) { %>
                <div class="overflow-x-auto">
                    <table id="trainers" class="min-w-full bg-white border border-gray-200 rounded-lg shadow-md">
                        <thead class="bg-gray-100 sticky top-0">
                            <tr>
                                <th class="py-2 px-4 border-b text-left text-gray-600" data-filter="id">Doc ID<br><select class="filter-select text-sm w-full" data-column="id"></select></th>
                                <th class="py-2 px-4 border-b text-left text-gray-600" data-filter="trainerName">Name<br><select class="filter-select text-sm w-full" data-column="trainerName"></select></th>
                                <th class="py-2 px-4 border-b text-left text-gray-600" data-filter="email">Email<br><select class="filter-select text-sm w-full" data-column="email"></select></th>
                                <th class="py-2 px-4 border-b text-left text-gray-600" data-filter="city">City<br><select class="filter-select text-sm w-full" data-column="city"></select></th>
                                <th class="py-2 px-4 border-b text-left text-gray-600" data-filter="district">District<br><select class="filter-select text-sm w-full" data-column="district"></select></th>        
                                <th class="py-2 px-4 border-b text-left text-gray-600" data-filter="profession">Profession<br><select class="filter-select text-sm w-full" data-column="profession"></select></th>
                                <th class="py-2 px-4 border-b text-left text-gray-600">Mobile Number</th>
                                <th class="py-2 px-4 border-b text-left text-gray-600">WhatsApp Number</th>
                                <th class="py-2 px-4 border-b text-left text-gray-600">Reference Name</th>
                                <th class="py-2 px-4 border-b text-left text-gray-600">Registered At</th>
                                <th class="py-2 px-4 border-b text-left text-gray-600" data-filter="isApproved">Approved<br><select class="filter-select text-sm w-full" data-column="isApproved"></select></th>
                                <th class="py-2 px-4 border-b text-left text-gray-600">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <% trainers.forEach(trainer => { %>
                                <tr class="hover:bg-gray-50">
                                    <td class="py-2 px-4 border-b text-gray-700" data-column="id"><%= trainer.id %></td>
                                    <td class="py-2 px-4 border-b text-gray-700" data-column="trainerName"><%= trainer.trainerName %></td>
                                    <td class="py-2 px-4 border-b text-gray-700" data-column="email"><%= trainer.email %></td>
                                    <td class="py-2 px-4 border-b text-gray-700" data-column="city"><%= trainer.city %></td>
                                    <td class="py-2 px-4 border-b text-gray-700" data-column="district"><%= trainer.district || 'N/A' %></td>
                                    <td class="py-2 px-4 border-b text-gray-700" data-column="profession"><%= trainer.profession %></td>
                                    <td class="py-2 px-4 border-b text-gray-700"><%= trainer.mobileNumber || 'N/A' %></td>
                                    <td class="py-2 px-4 border-b text-gray-700"><%= trainer.whatsappNumber || 'N/A' %></td>
                                    <td class="py-2 px-4 border-b text-gray-700"><%= trainer.referenceName || 'N/A' %></td>
                                    <td class="py-2 px-4 border-b text-gray-700">
                                        <%= trainer.registeredAt ? trainer.registeredAt.toLocaleString('en-US', { timeZone: 'Asia/Kolkata', weekday: 'long', year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit' }) : 'N/A' %>
                                    </td>
                                    <td class="py-2 px-4 border-b text-gray-700" data-column="isApproved">
                                        <%= trainer.isApproved ? 'Yes' : 'No' %>
                                    </td>
                                    <td class="py-2 px-4 border-b">
                                        <div class="flex flex-col sm:flex-row sm:space-x-2 space-y-2 sm:space-y-0">
                                            <% if (!trainer.isApproved) { %>
                                                <form action="/admin/approve-trainer" method="POST" class="inline">
                                                    <input type="hidden" name="trainerId" value="<%= trainer.id %>">
                                                    <button type="submit" class="bg-green-500 hover:bg-green-600 text-white font-semibold py-1 px-3 rounded">Approve</button>
                                                </form>
                                            <% } %>
                                            <form action="/admin-dashboard/delete-trainer/<%= trainer.id %>" method="POST" onsubmit="return confirmDelete('<%= trainer.trainerName %>')">
                                                <button type="submit" class="bg-red-500 hover:bg-red-600 text-white font-semibold py-1 px-3 rounded">Delete</button>
                                            </form>
                                        </div>
                                    </td>
                                </tr>
                            <% }) %>
                        </tbody>
                    </table>
                </div>
            <% } else { %>
                <p class="text-gray-700">No trainers registered yet.</p>
            <% } %>
        </div>

      <div id="students" class="tab-content hidden">
    <h2 class="text-2xl font-bold mb-4 text-gray-700">Registered Students</h2>
    <% if (participants && participants.length > 0) { %>
        <div class="overflow-x-auto">
            <table id="students" class="min-w-full bg-white border border-gray-200 rounded-lg shadow-md">
                <thead class="bg-gray-100 sticky top-0">
                    <tr>
                        <th class="py-2 px-4 border-b text-left text-gray-600" data-filter="id">Doc ID<br><select class="filter-select text-sm w-full" data-column="id"></select></th>
                        <th class="py-2 px-4 border-b text-left text-gray-600" data-filter="studentName">Name<br><select class="filter-select text-sm w-full" data-column="studentName"></select></th>
                        <th class="py-2 px-4 border-b text-left text-gray-600" data-filter="schoolNameDropdown">School<br><select class="filter-select text-sm w-full" data-column="schoolNameDropdown"></select></th>
                        <th class="py-2 px-4 border-b text-left text-gray-600" data-filter="studentClass">Class<br><select class="filter-select text-sm w-full" data-column="studentClass"></select></th>
                        <th class="py-2 px-4 border-b text-left text-gray-600" data-filter="parentEmail">Parent Email<br><select class="filter-select text-sm w-full" data-column="parentEmail"></select></th>
                        <th class="py-2 px-4 border-b text-left text-gray-600">Parent Mobile 1</th>
                        <th class="py-2 px-4 border-b text-left text-gray-600">Parent Mobile 2</th>
                        <th class="py-2 px-4 border-b text-left text-gray-600">Address</th>
                        <th class="py-2 px-4 border-b text-left text-gray-600" data-filter="city">City<br><select class="filter-select text-sm w-full" data-column="city"></select></th>
                        <th class="py-2 px-4 border-b text-left text-gray-600">Pincode</th>
                        <th class="py-2 px-4 border-b text-left text-gray-600">Birthdate</th>
                        <th class="py-2 px-4 border-b text-left text-gray-600" data-filter="hasCompletedMCQ">MCQ Completed<br><select class="filter-select text-sm w-full" data-column="hasCompletedMCQ"></select></th>
                        <th class="py-2 px-4 border-b text-left text-gray-600" data-filter="isChampion">Champ Status<br><select class="filter-select text-sm w-full" data-column="isChampion"><option value="">All</option><option value="Yes">Yes</option><option value="No">No</option></select></th>
                        <th class="py-2 px-4 border-b text-left text-gray-600">Score</th>
                    </tr>
                </thead>
                <tbody>
                    <% participants.forEach(participant => { %>
                        <tr class="hover:bg-gray-50">
                            <td class="py-2 px-4 border-b text-gray-700" data-column="id"><%= participant.id %></td>
                            <td class="py-2 px-4 border-b text-gray-700" data-column="studentName"><%= participant.studentName %></td>
                            <td class="py-2 px-4 border-b text-gray-700" data-column="schoolNameDropdown"><%= participant.schoolNameDropdown %></td>
                            <td class="py-2 px-4 border-b text-gray-700" data-column="studentClass"><%= participant.studentClass %></td>
                            <td class="py-2 px-4 border-b text-gray-700" data-column="parentEmail"><%= participant.parentEmail %></td>
                            <td class="py-2 px-4 border-b text-gray-700"><%= participant.parentMobile1 || 'N/A' %></td>
                            <td class="py-2 px-4 border-b text-gray-700"><%= participant.parentMobile2 || 'N/A' %></td>
                            <td class="py-2 px-4 border-b text-gray-700"><%= participant.address || 'N/A' %></td>
                            <td class="py-2 px-4 border-b text-gray-700" data-column="city"><%= participant.city %></td>
                            <td class="py-2 px-4 border-b text-gray-700"><%= participant.pincode || 'N/A' %></td>
                            <td class="py-2 px-4 border-b text-gray-700">
                                <%= participant.birthdate ? new Date(participant.birthdate).toLocaleDateString('en-US', { timeZone: 'Asia/Kolkata' }) : 'N/A' %>
                            </td>
                            <td class="py-2 px-4 border-b text-gray-700" data-column="hasCompletedMCQ">
                                <%= participant.hasCompletedMCQ ? 'Yes' : 'No' %>
                            </td>
                            <td class="py-2 px-4 border-b text-gray-700" data-column="isChampion">
                                <%= participant.isChampion ? 'Yes' : 'No' %>
                            </td>
                            <td class="py-2 px-4 border-b text-gray-700">
                                <%= participant.score !== undefined ? participant.score : 'N/A' %>
                            </td>
                        </tr>
                    <% }) %>
                </tbody>
            </table>
        </div>
    <% } else { %>
        <p class="text-gray-700">No students registered yet.</p>
    <% } %>
</div>

<div id="detail-summary" class="tab-content hidden bg-white p-4 rounded shadow">
    <h2 class="text-xl font-bold mb-4 text-gray-700">Training Schedule: Detailed Summary</h2>
    <div class="overflow-x-auto">
        <table id="detailedSummaryTable" class="min-w-full bg-white border border-gray-300 rounded">
            <thead class="bg-gray-100">
                <tr>
                    <th class="px-3 py-2 border-b">Date</th>
                    <th class="px-3 py-2 border-b">Day</th>
                    <th class="px-3 py-2 border-b">School Name</th>
                    <th class="px-3 py-2 border-b">Trainer Name</th>
                    <th class="px-3 py-2 border-b">Time Slot</th>
                    <th class="px-3 py-2 border-b">Trainer Occupied</th>
                    <th class="px-3 py-2 border-b">School Confirmed?</th>
                    <th class="px-3 py-2 border-b">Logistics Done?</th>
                    <!-- <th class="px-3 py-2 border-b">Materials Sent?</th> -->
                    <th class="px-3 py-2 border-b">Delivery Number</th>
                </tr>
            </thead>
            <tbody>
                <% if (schools && schools.length > 0) { %>
                    <% schools.filter(school => school.isApproved && school.eventDate && school.isCompleted).forEach(school => { %>
                        <tr>
                            <td class="px-3 py-2 border-b text-gray-700">
                                <%= school.eventDate ? school.eventDate.toLocaleString('en-US', { timeZone: 'Asia/Kolkata', year: 'numeric', month: 'long', day: 'numeric' }) : 'Not assigned' %>
                            </td>
                            <td class="px-3 py-2 border-b text-gray-700">
                                <%= school.eventDate ? school.eventDate.toLocaleString('en-US', { timeZone: 'Asia/Kolkata', weekday: 'long' }) : 'N/A' %>
                            </td>
                            <td class="px-3 py-2 border-b text-gray-700">
                                <%= school.schoolName %>
                            </td>
                            <td class="px-3 py-2 border-b text-gray-700">
                                <% let trainer1 = school.trainerId1 && trainers.find(t => t.id === school.trainerId1); %>
                                <% let trainer2 = school.trainerId2 && trainers.find(t => t.id === school.trainerId2); %>
                                <%= trainer1 ? trainer1.trainerName : 'Not Assigned' %><%= trainer2 ? ', ' + trainer2.trainerName : '' %>
                            </td>
                            <td class="px-3 py-2 border-b text-gray-700">
                                <% if (school.workshopStartTime && school.workshopEndTime) { %>
                                    <%= school.workshopStartTime %> - <%= school.workshopEndTime %>
                                <% } else { %>
                                    Not Assigned
                                <% } %>
                            </td>
                            <td class="px-3 py-2 border-b text-gray-700">
                                <%= (school.trainerId1 || school.trainerId2) ? 'Yes' : 'No' %>
                            </td>
                            <td class="px-3 py-2 border-b text-gray-700">
                                Yes
                            </td>
                            <td class="px-3 py-2 border-b text-gray-700 <%= school.deliveryMode === 'delivered' ? 'text-green-600' : school.deliveryMode === 'pending' ? 'text-yellow-600' : school.deliveryMode === 'shipped' ? 'text-blue-600' : '' %>">
                                <%= school.deliveryMode || 'N/A' %>
                            </td>
                            <!-- <td class="px-3 py-2 border-b text-gray-700">
                                <%= school.resourcesConfirmed ? 'Yes' : 'No' %>
                            </td> -->
                            <td class="px-3 py-2 border-b text-gray-700">
                                <%= school.deliveryNumber || 'N/A' %>
                            </td>
                        </tr>
                    <% }) %>
                <% } else { %>
                    <tr>
                        <td class="px-3 py-2 border-b text-gray-700" colspan="10">No completed schools available.</td>
                    </tr>
                <% } %>
            </tbody>
        </table>
    </div>
</div>


 <!-- Media Section -->
<div id="media" class="tab-content hidden">
  <h2 class="text-2xl font-bold mb-4 text-gray-700">Media Uploads</h2>

  <!-- Filter Dropdowns -->
  <div class="flex flex-col sm:flex-row sm:space-x-4 mb-4">
    <div>
      <label for="uploaderFilter" class="text-gray-600 font-semibold mr-2">Filter by Uploader:</label>
      <select id="uploaderFilter" class="border rounded py-1 px-2 text-gray-700 filter-select">
        <option value="All">All</option>
        <option value="Trainer">Trainer</option>
        <option value="Student">Student</option>
        <option value="School">School</option>
      </select>
    </div>
    <div>
      <label for="seenFilter" class="text-gray-600 font-semibold mr-2">Filter by Status:</label>
      <select id="seenFilter" class="border rounded py-1 px-2 text-gray-700 filter-select">
        <option value="All">All</option>
        <option value="Seen">Seen</option>
        <option value="Unseen">Unseen</option>
      </select>
    </div>
    <div>
      <label for="mediaTypeFilter" class="text-gray-600 font-semibold mr-2">Filter by Media Type:</label>
      <select id="mediaTypeFilter" class="border rounded py-1 px-2 text-gray-700 filter-select">
        <option value="All">All</option>
        <option value="Image">Image</option>
        <option value="Video">Video</option>
      </select>
    </div>
  </div>

  <!-- Debug Info -->
  <% if (imageUploads && imageUploads.all) { %>
    <p class="text-sm text-gray-600 mb-4">
      Total media items received = <%= imageUploads.all.length %> (Images: <%= imageUploads.all.filter(m => m.type === 'image').length %>, Videos: <%= imageUploads.all.filter(m => m.type === 'video').length %>)
    </p>
  <% } else { %>
    <p class="text-sm text-red-600 mb-4">Debug: No media data received from server.</p>
  <% } %>

  <!-- Media Sections -->
  <% const sections = [
      { title: 'School Images', data: imageUploads?.images?.school, uploaderType: 'School', mediaType: 'Image' },
      { title: 'School Videos', data: imageUploads?.videos?.school, uploaderType: 'School', mediaType: 'Video' },
      { title: 'Trainer Images', data: imageUploads?.images?.trainer, uploaderType: 'Trainer', mediaType: 'Image' },
      { title: 'Trainer Videos', data: imageUploads?.videos?.trainer, uploaderType: 'Trainer', mediaType: 'Video' },
      { title: 'Student Images', data: imageUploads?.images?.student, uploaderType: 'Student', mediaType: 'Image' },
      { title: 'Student Videos', data: imageUploads?.videos?.student, uploaderType: 'Student', mediaType: 'Video' }
    ]; %>

  <% sections.forEach(section => { %>
    <h3 class="text-xl font-semibold mb-2 text-gray-700"><%= section.title %></h3>
    <% if (section.data && Array.isArray(section.data) && section.data.length > 0) { %>
      <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-6 mb-8">
        <% section.data.forEach(upload => { %>
          <div 
            class="media-card bg-white p-4 rounded-lg shadow hover:shadow-lg transition-all duration-300 cursor-pointer"
            data-uploader-type="<%= upload.uploaderType || 'Unknown' %>"
            data-seen="<%= upload.seen ? 'true' : 'false' %>"
            data-media-type="<%= section.mediaType %>"
            onclick="openMediaModal('<%= upload.id %>', '<%= upload.url %>', '<%= section.mediaType.toLowerCase() %>')"
          >
            <div class="flex items-center mb-2">
              <input type="checkbox" class="mark-seen-checkbox mr-2 h-5 w-5"
                data-media-id="<%= upload.id %>" <%= upload.seen ? 'checked' : '' %>
                onchange="event.stopPropagation(); markMediaSeen('<%= upload.id %>', this, this.closest('.media-card'))">
              <label class="text-gray-600 text-sm">Mark as Seen</label>
            </div>
            <span class="inline-block mb-2 px-2 py-1 text-xs font-semibold rounded <%= upload.uploaderType === 'School' ? 'bg-yellow-100 text-yellow-800' : upload.uploaderType === 'Trainer' ? 'bg-blue-100 text-blue-800' : 'bg-green-100 text-green-800' %>">
              <%= upload.uploaderType %>
            </span>
            <% if (section.mediaType === 'Image') { %>
              <img src="<%= upload.url %>" alt="Media" class="w-full h-48 object-cover rounded mb-2 shadow" 
                   onerror="this.onerror=null; this.src='https://via.placeholder.com/150?text=Image+Failed'; console.error('Image load failed for ID <%= upload.id %>: ', this.src);">
            <% } else { %>
              <video controls class="w-full h-48 object-cover rounded mb-2 shadow" 
                     onerror="this.onerror=null; this.innerHTML='Video failed to load. <a href=\'<%= upload.url %>\' target=\'_blank\'>Click to view</a>'; console.error('Video load failed for ID <%= upload.id %>: ', this.src);">
                <source src="<%= upload.url %>" type="video/mp4">
                Your browser does not support the video tag.
              </video>
            <% } %>
            <div class="text-gray-700 text-sm mb-1">
              <strong>Description:</strong>
              <span class="description-text"><%= upload.description || 'No description provided' %></span>
              <input 
                type="text" 
                class="edit-description-input hidden border border-gray-300 rounded px-2 py-1 text-sm w-full mt-1" 
                value="<%= upload.description || '' %>" 
                data-media-id="<%= upload.id %>" 
              />
              <button 
                class="edit-description-btn text-blue-500 hover:underline text-sm ml-2"
                onclick="event.stopPropagation(); toggleDescriptionEdit(this)">
                Edit
              </button>
              <button 
                class="save-description-btn text-green-600 hover:underline text-sm ml-2 hidden"
                onclick="event.stopPropagation(); saveDescription(this)">
                Save
              </button>
            </div>
            <% if (upload.link) { %>
              <p class="text-gray-700 text-sm mb-1">
                <strong>Link:</strong> 
                <a href="<%= upload.link %>" target="_blank" class="text-blue-500 hover:underline"><%= upload.link %></a>
              </p>
            <% } %>
            <p class="text-gray-700 text-sm mb-1">
              <strong>Uploaded At:</strong> 
              <%= upload.uploadedAt 
                ? new Date(upload.uploadedAt).toLocaleString('en-US', {
                    timeZone: 'Asia/Kolkata',
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric',
                    hour: '2-digit',
                    minute: '2-digit'
                  }) 
                : 'N/A' %>
            </p>
            <p class="text-gray-700 text-sm">
              <strong>Uploaded By:</strong> <%= upload.uploadedBy || 'Unknown' %>
            </p>
            <div class="flex justify-between mt-4 space-x-2" >
              <button 
                type="button"
                class="post-to-fb-btn bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
                data-id="<%= upload.id %>"
                data-url="<%= upload.url %>"
                data-type="<%= section.mediaType.toLowerCase() %>"
                data-caption="<%= upload.description || '' %>"
                onclick="event.stopPropagation(); postToSocials(this)">
                <span class="post-text">Post to Social</span>
                <span class="posting-text hidden">Posting...</span>
              </button>
              <div id="uploadStatus" class="mt-2 text-center"></div>
   <button 
  type="button"
  class="post-to-website-btn bg-purple-500 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
  data-id="<%= upload.id %>"
  data-url="<%= upload.url %>"
  data-type="<%= section.mediaType.toLowerCase() %>"
  data-caption="<%= upload.description || '' %>"
  onclick="console.log('Button clicked for ID: <%= upload.id %>'); event.stopPropagation(); postToWebsite(this)">
  <span class="post-text">Post to Website</span>
  <span class="posting-text hidden">Posting...</span>
</button>
              <button 
                type="button"
                onclick="event.stopPropagation(); downloadMedia('<%= upload.id %>', '<%= section.mediaType.toLowerCase() %>')"
                class="bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline">
                Download
              </button>
            </div>
          </div>
        <% }) %>
      </div>
    <% } else { %>
      <p class="text-gray-500">No <%= section.title.toLowerCase() %> available.</p>
    <% } %>
  <% }) %>
</div>  

<div id="upload-photo" class="tab-content hidden">
    <h2 class="text-2xl font-bold mb-6 text-gray-800">Upload Photo/Video</h2>
    <form action="/upload-image" method="post" enctype="multipart/form-data" class="max-w-md mx-auto p-6 bg-white rounded-lg shadow-lg">
        <div class="mb-4">
            <label for="images" class="block text-sm font-medium text-gray-700 mb-2">Select Files</label>
            <input type="file" name="images" id="images" multiple 
                   class="block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-md 
                          file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 
                          hover:file:bg-blue-100 cursor-pointer"/>
        </div>
        <button type="submit" 
                class="w-full py-2 px-4 bg-blue-600 text-white font-semibold rounded-md 
                       hover:bg-blue-700 transition duration-200">
            Upload
        </button>
    </form>
</div>
     
<!-- Add Coordinator Tab Content -->
<div id="add-coordinator" class="tab-content">
    <h2 class="text-2xl font-bold mb-4 text-gray-700 text-center">Add Coordinator</h2>
    <div class="bg-white p-6 rounded-lg shadow-md max-w-lg mx-auto">
        <form id="coordinatorForm" action="/co-ordinator-register" method="POST" class="space-y-4">
            
            <!-- Name -->
            <div>
                <label for="name" class="block text-sm font-medium text-gray-700">Coordinator Name</label>
                <input type="text" id="name" name="name" required
                    class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm 
                           focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                    placeholder="Enter coordinator name">
            </div>

            <!-- Email -->
            <div>
                <label for="email" class="block text-sm font-medium text-gray-700">Email</label>
                <input type="email" id="email" name="email" required
                    class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm 
                           focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                    placeholder="Enter email">
            </div>

            <!-- Mobile Number -->
            <div>
                <label for="number" class="block text-sm font-medium text-gray-700">Mobile Number</label>
                <input type="tel" id="number" name="number" required pattern="[0-9]{10}"
                    class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm 
                           focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                    placeholder="Enter 10-digit mobile number">
                <p class="mt-1 text-xs text-gray-500">Format: 10 digits only</p>
            </div>

            <!-- Password -->
            <div>
                <label for="password" class="block text-sm font-medium text-gray-700">Password</label>
                <input type="password" id="password" name="password" required minlength="6"
                    class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm 
                           focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                    placeholder="Enter password">
                <p class="mt-1 text-xs text-gray-500">At least 6 characters</p>
            </div>

            <!-- Organization -->
            <div>
                <label for="organization" class="block text-sm font-medium text-gray-700">District/Organization</label>
                <input type="text" id="organization" name="organization" required
                    class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm 
                           focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                    placeholder="Enter district or organization">
            </div>

            <!-- Submit Button -->
            <div>
                <button type="submit" id="submitButton"
                    class="w-full flex items-center justify-center gap-2 bg-blue-600 text-white font-semibold py-2 px-4 
                           rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 
                           disabled:bg-blue-400 disabled:cursor-not-allowed transition">
                    <svg id="loadingSpinner" class="hidden animate-spin h-5 w-5 text-white"
                         xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                         <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                         <path class="opacity-75" fill="currentColor"
                               d="M4 12a8 8 0 018-8v4a4 4 0 00-4 4H4z"></path>
                    </svg>
                    <span id="buttonText">Register Coordinator</span>
                </button>
            </div>
        </form>

        <!-- Success/Error Message -->
        <div id="coordinatorMessage" class="hidden mt-4 p-4 rounded-md text-center"></div>
    </div>
</div>

   <!-- //upload by co ordinator Workshop Summaries -->

    <div id="workshop-form" class="tab-content hidden p-4 bg-white rounded-b-lg">
    <h2 class="text-lg font-bold mb-4">Workshop Summaries</h2>
    
    <table class="min-w-full border-collapse border border-gray-300" id="workshopTable">
        <thead class="bg-gray-100">
        <tr>
          <th class="px-4 py-2 border text-left">School Name</th>
          <th class="px-4 py-2 border text-left">Trainer 1</th>
          <th class="px-4 py-2 border text-left">Trainer 2</th>
          <th class="px-4 py-2 border text-left">Coordinator</th>
          <th class="px-4 py-2 border text-left">Workshop Date</th>
          <th class="px-4 py-2 border text-left">Financial Status</th>
        </tr>
      </thead>
          <tbody>
        <% if (workshopSummaries && workshopSummaries.length > 0) { %>
          <% workshopSummaries.forEach(ws => { %>
            <tr class="hover:bg-gray-50">
              <td class="border px-4 py-2"><%= ws.schoolName %></td>
              <td class="border px-4 py-2"><%= ws.trainer1 %></td>
              <td class="border px-4 py-2"><%= ws.trainer2 %></td>
              <td class="border px-4 py-2"><%= ws.coordinator %></td>
              <td class="border px-4 py-2">
                <% if (ws.workshopDate) { %>
                  <%= ws.workshopDate %>
                <% } else { %>
                  <span class="text-gray-400 italic">N/A</span>
                <% } %>
              </td>
              <td class="border px-4 py-2"><%= ws.financialStatus %></td>
            </tr>
          <% }) %>
        <% } else { %>
          <tr>
            <td colspan="6" class="text-center text-gray-500 py-4">
              No workshop summaries found
            </td>
          </tr>
        <% } %>
      </tbody>
    </table>
</div>

<!-- add the admin -->
    <div id="call-log" class="tab-content container mx-auto p-6">
    <h2 class="text-2xl font-bold mb-4 text-gray-700">Call Logs</h2>
    <div class="mb-8">
        <button id="openCallLogDialog" class="bg-blue-600 text-white font-semibold py-2 px-4 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500">
            Add Call
        </button>
    </div>
    <dialog id="callLogDialog" class="bg-white p-6 rounded-lg shadow-md max-w-lg w-full">
        <form id="callLogForm" action="/add-call-log" method="POST" class="space-y-4">
            <div>
                <label for="callDate" class="block text-sm font-medium text-gray-700">Call Date</label>
                <input type="date" id="callDate" name="callDate" required class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm" value="2025-08-12">
            </div>
            <div>
                <label for="caller" class="block text-sm font-medium text-gray-700">School Name (Caller)</label>
                <input type="text" id="caller" name="caller" required class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm" placeholder="Enter school name (e.g., Springfield High)">
            </div>
                    <div>
    <label for="schoolName" class="block text-sm font-medium text-gray-700">City</label>
    <input type="text" id="schoolName" name="schoolName" required class="mt-1 block w-full border-gray-300 rounded-md shadow-sm">
</div>
            <div>
                <label for="recipient" class="block text-sm font-medium text-gray-700">Recipient Name</label>
                <input type="text" id="recipient" name="recipient" required class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm" placeholder="Enter recipient name (e.g., Admin)">
            </div>
            <div>
                <label for="notes" class="block text-sm font-medium text-gray-700">Description</label>
                <textarea id="notes" name="notes" rows="4" required class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm" placeholder="Enter call details or notes"></textarea>
            </div>
    

<div>
    <label for="contactPerson" class="block text-sm font-medium text-gray-700">Contact Person</label>
    <input type="text" id="contactPerson" name="contactPerson" required class="mt-1 block w-full border-gray-300 rounded-md shadow-sm">
</div>
            
            <div class="flex justify-end space-x-4">
                <button type="button" id="cancelCallLogButton" class="bg-gray-300 text-gray-700 font-semibold py-2 px-4 rounded-md hover:bg-gray-400 focus:outline-none focus:ring-2 focus:ring-gray-500">
                    Cancel
                </button>
                <button type="submit" id="submitCallLogButton" class="bg-blue-600 text-white font-semibold py-2 px-4 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 disabled:bg-blue-400 disabled:cursor-not-allowed">
                    <span id="callLogButtonText">Add Call Log</span>
                    <span id="callLogLoadingText" class="hidden">Adding...</span>
                </button>
            </div>
        </form>
        <div id="callLogMessage" class="hidden mt-4 p-4 rounded-md text-center"></div>
    </dialog>
    <div class="overflow-x-auto">
        <table id="call-logs" class="min-w-full bg-white border border-gray-200 rounded-lg shadow-md">
           <thead class="bg-gray-100 sticky top-0">
                    <tr>
                        <th class="py-2 px-4 border-b text-left text-gray-600" data-filter="id">ID<br><select class="filter-select text-sm w-full" data-column="id"></select></th>
                        <th class="py-2 px-4 border-b text-left text-gray-600" data-filter="callDate">Date<br><select class="filter-select text-sm w-full" data-column="callDate"></select></th>
                        <th class="py-2 px-4 border-b text-left text-gray-600" data-filter="caller">School Name<br><select class="filter-select text-sm w-full" data-column="caller"></select></th>
                        <th class="py-2 px-4 border-b text-left text-gray-600" data-filter="contactPerson">contactPerson<br><select class="filter-select text-sm w-full" data-column="contactPerson"></select></th>
                         <th class="py-2 px-4 border-b text-left text-gray-600" data-filter="recipient">Recipient<br><select class="filter-select text-sm w-full" data-column="recipient"></select></th>
                       
                        <th class="py-2 px-4 border-b text-left text-gray-600" data-column="Description">Description</th>
                    </tr>
                </thead>
           <tbody id="call-logs-body">
                    <% if (callLogs.length > 0) { %>
                        <% callLogs.forEach(log => { %>
                            <tr>
                                <td><%= log.id %></td>
                                <td><%= log.callDate %></td>
                                <td><%= log.caller %></td>
                                <td><%= log.recipient %></td>
                                <td><%= log.contactPerson %></td>
                                <td><%= log.notes %></td>
                            </tr>
                        <% }) %>
                    <% } else { %>
                        <tr>
                            <td colspan="6">No call logs found</td>
                        </tr>
                    <% } %>
                </tbody>
        </table>
    </div>
    </div>
</div>

<!-- Login Log Tab Content -->
<div id="login-log" class="tab-content">
        <h2 class="text-2xl font-bold mb-4 text-gray-700">Admin Login Activity</h2>
        <p class="text-gray-600 mb-4">Showing real-time admin login activity with IP Address details</p>
        <div class="overflow-x-auto mb-6">
            <table id="login-logs" class="min-w-full bg-white border border-gray-200 rounded-lg shadow-md">
                <thead class="bg-gray-100 sticky top-0">
                    <tr>
                        <th class="py-2 px-4 border-b text-left text-gray-600" data-filter="ipAddress">IP Address<br><select class="filter-select text-sm w-full" data-column="ipAddress"></select></th>
                        <th class="py-2 px-4 border-b text-left text-gray-600" data-filter="latitude">Latitude<br><select class="filter-select text-sm w-full" data-column="latitude"></select></th>
                        <th class="py-2 px-4 border-b text-left text-gray-600" data-filter="longitude">Longitude<br><select class="filter-select text-sm w-full" data-column="longitude"></select></th>
                        <th class="py-2 px-4 border-b text-left text-gray-600" data-filter="loginTime">Login Time<br><select class="filter-select text-sm w-full" data-column="loginTime"></select></th>
                    </tr>
                </thead>
                <tbody id="login-logs-body"></tbody>
            </table>
        </div>
    </div>
        <!-- upload by co-ordiantor -->
<div id="student-feedback" class="tab-content hidden">
    <h2 class="text-2xl font-bold mb-4 text-gray-700">Student Feedback</h2>
    <p class="text-gray-600 mb-4">Showing student feedback submissions</p>
    <div class="overflow-x-auto mb-6">
        <table id="student-feedback-table" class="min-w-full bg-white border border-gray-200 rounded-lg shadow-md">
            <thead class="bg-gray-100 sticky top-0">
                <tr>
                    <th class="py-2 px-4 border-b text-left text-gray-600" data-filter="studentName">
                        Student Name<br>
                        <select class="filter-select text-sm w-full" data-column="studentName"></select>
                    </th>
                    <th class="py-2 px-4 border-b text-left text-gray-600" data-filter="className">
                        Class<br>
                        <select class="filter-select text-sm w-full" data-column="className"></select>
                    </th>
                    <th class="py-2 px-4 border-b text-left text-gray-600">How would you rate todays workshop?
</th>
                    <th class="py-2 px-4 border-b text-left text-gray-600">Would you recommend this workshop to your friends?
</th>
                    <th class="py-2 px-4 border-b text-left text-gray-600">Which part of the workshop did you enjoy the most?
</th>
                    <th class="py-2 px-4 border-b text-left text-gray-600">What did you learn today that you didn`t know before?
</th>
                    <th class="py-2 px-4 border-b text-left text-gray-600">Do you have any suggestions to make this workshop better?
</th>
                    <th class="py-2 px-4 border-b text-left text-gray-600" data-filter="createdAt">
                        Submission Date (IST)<br>
                        <select class="filter-select text-sm w-full" data-column="createdAt"></select>
                    </th>
                </tr>
            </thead>
            <tbody id="student-feedback-body">
                <% feedbackEntries.forEach(entry => { %>
                    <tr>
                        <td class="py-2 px-4 border-b text-gray-700"><%= entry.studentName %></td>
                        <td class="py-2 px-4 border-b text-gray-700"><%= entry.className %></td>
                        <td class="py-2 px-4 border-b text-gray-700"><%= entry.question1 %></td>
                        <td class="py-2 px-4 border-b text-gray-700"><%= entry.question2 %></td>
                        <td class="py-2 px-4 border-b text-gray-700"><%= entry.question3 %></td>
                        <td class="py-2 px-4 border-b text-gray-700"><%= entry.question4 %></td>
                        <td class="py-2 px-4 border-b text-gray-700"><%= entry.question5 %></td>
                        <td class="py-2 px-4 border-b text-gray-700"><%= entry.createdAt %></td>
                    </tr>
                <% }) %>
            </tbody>
        </table>
    </div>
</div>

   

<div id="visited-school" class="tab-content hidden">
    <h2 class="text-2xl font-bold mb-4 text-gray-700">Visited Schools</h2>
    <p class="text-gray-600 mb-4">Showing list of all visited schools</p>

    <div class="overflow-x-auto mb-6">
        <table id="visited-schools-table" class="min-w-full bg-white border border-gray-200 rounded-lg shadow-md">
            <thead class="bg-gray-100 sticky top-0">
                <tr>
                    <th class="py-2 px-4 border-b text-left text-gray-600" data-filter="name">
                        School Name<br>
                        <select class="filter-select text-sm w-full" data-column="name"></select>
                    </th>
                    <th class="py-2 px-4 border-b text-left text-gray-600" data-filter="visitDate">
                        Visit Date<br>
                        <select class="filter-select text-sm w-full" data-column="visitDate"></select>
                    </th>
                    <th class="py-2 px-4 border-b text-left text-gray-600">School Address</th>
                    <th class="py-2 px-4 border-b text-left text-gray-600" data-filter="contactPerson">
                        Contact Person<br>
                        <select class="filter-select text-sm w-full" data-column="contactPerson"></select>
                    </th>
                    <th class="py-2 px-4 border-b text-left text-gray-600">Contact Number</th>
                    <th class="py-2 px-4 border-b text-left text-gray-600">Visit Notes</th>
                    <th class="py-2 px-4 border-b text-left text-gray-600" data-filter="coordinatorId">
                        Coordinator<br>
                        <select class="filter-select text-sm w-full" data-column="coordinatorId"></select>
                    </th>
                    <th class="py-2 px-4 border-b text-left text-gray-600" data-filter="createdAt">
                        Created At<br>
                        <select class="filter-select text-sm w-full" data-column="createdAt"></select>
                    </th>
                </tr>
            </thead>
            <tbody class="text-sm divide-y divide-gray-200">
                <% if (!visitedSchools || visitedSchools.length === 0) { %>
                    <tr>
                        <td colspan="8" class="py-4 px-4 text-center text-gray-500">
                            No visited schools found.
                        </td>
                    </tr>
                <% } else { %>
                    <% visitedSchools.forEach(school => { %>
                        <tr class="hover:bg-gray-50 transition-colors">
                            <td class="py-3 px-4 font-medium text-gray-800"><%= school.name %></td>
                            <td class="py-3 px-4 text-gray-700"><%= school.visitDate || 'N/A' %></td>
                            <td class="py-3 px-4 text-gray-700"><%= school.schoolAddress %></td>
                            <td class="py-3 px-4"><%= school.contactPerson %></td>
                            <td class="py-3 px-4"><%= school.contactNumber %></td>
                            <td class="py-3 px-4 text-gray-600 italic"><%= school.visitNotes %></td>
                            <td class="py-3 px-4">
                                <span class="px-3 py-1 rounded-full text-xs bg-blue-100 text-blue-700">
                                    <%= school.coordinatorName || 'N/A' %>
                                </span>
                            </td>
                            <td class="py-3 px-4 text-gray-500"><%= school.createdAt || 'N/A' %></td>
                        </tr>
                    <% }); %>
                <% } %>
            </tbody>
        </table>
    </div>
</div>


</body>
</html>	