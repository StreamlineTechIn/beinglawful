<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>School Dashboard - Being Lawful</title>
    <!-- Firebase Compatibility SDK -->
    <script src="https://www.gstatic.com/firebasejs/10.14.0/firebase-app-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/10.14.0/firebase-firestore-compat.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f4f4f4;
            margin: 0;
            padding: 20px;
        }
        .dashboard-container {
            max-width: 1200px;
            margin: 0 auto;
            background-color: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 0 15px rgba(0, 0, 0, 0.1);
            position: relative;
        }
        .dashboard-container h2 {
            text-align: center;
            color: #333;
            margin-bottom: 10px;
        }
        .event-date {
            text-align: center;
            color: #555;
            font-size: 1.1em;
            margin-bottom: 15px;
        }
        .event-date.missing {
            color: #e74c3c;
            font-style: italic;
        }
        .error {
            color: #e74c3c;
            text-align: center;
            margin-bottom: 15px;
        }
        .tab-container {
            margin-top: 15px;
        }
        .tab-buttons {
            display: flex;
            border-bottom: 2px solid #ddd;
        }
        .tab-button {
            flex: 1;
            padding: 10px;
            text-align: center;
            background-color: #f1f1f1;
            color: #555;
            cursor: pointer;
            border: none;
            border-radius: 4px 4px 0 0;
            transition: background-color 0.3s, color 0.3s;
        }
        .tab-button:hover {
            background-color: #e0e0e0;
        }
        .tab-button.active {
            background-color: #4CAF50;
            color: white;
        }
        .tab-content {
            display: none;
            padding: 15px;
            border: 1px solid #ddd;
            border-top: none;
            border-radius: 0 0 4px 4px;
        }
        .tab-content.active {
            display: block;
        }
        .table-container {
            width: 100%;
            overflow-x: auto;
        }
        #studentTable {
            width: 100%;
            border-collapse: collapse;
            margin: 15px 0;
            background-color: #fff;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }
        #studentTable th,
        #studentTable td {
            padding: 10px;
            border: 1px solid #ddd;
            text-align: left;
        }
        #studentTable th {
            background-color: #4CAF50;
            color: white;
            font-weight: bold;
        }
        #studentTable tr:nth-child(even) {
            background-color: #f9f9f9;
        }
        #studentTable th:nth-child(1),
        #studentTable td:nth-child(1) { width: 180px; }
        #studentTable th:nth-child(2),
        #studentTable td:nth-child(2) { width: 90px; }
        #studentTable th:nth-child(3),
        #studentTable td:nth-child(3) { width: 140px; }
        #studentTable th:nth-child(4),
        #studentTable td:nth-child(4) { width: 140px; }
        #studentTable th:nth-child(5),
        #studentTable td:nth-child(5) { width: 140px; }
        #studentTable th:nth-child(6),
        #studentTable td:nth-child(6) { width: 140px; }
        #studentTable th:nth-child(7),
        #studentTable td:nth-child(7) { width: 140px; }
        #studentTable th:nth-child(8),
        #studentTable td:nth-child(8) { width: 140px; }
        #studentTable th:nth-child(9),
        #studentTable td:nth-child(9) { width: 100px; }
        #studentTable th:nth-child(10),
        #studentTable td:nth-child(10) { width: 100px; }
        #studentTable th:nth-child(11),
        #studentTable td:nth-child(11) { width: 100px; }
        .filter-select {
            padding: 5px;
            border: 1px solid #ddd;
            border-radius: 4px;
            width: 180px;
            margin-top: 5px;
            background: linear-gradient(135deg, #f5f7fa, #e4e7eb);
            transition: border-color 0.3s, box-shadow 0.3s;
        }
        .filter-select:hover {
            border-color: #4CAF50;
        }
        .filter-select:focus {
            border-color: #4CAF50;
            box-shadow: 0 0 5px rgba(76, 175, 80, 0.3);
            outline: none;
        }
        .timepicker {
            padding: 8px;
            border: 1px solid #00acc1;
            border-radius: 6px;
            width: 160px;
            margin-top: 5px;
            background: linear-gradient(135deg, #ffffff, #e0f7fa);
            color: #333;
            font-size: 14px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            transition: all 0.3s ease;
            cursor: pointer;
        }
        .timepicker:hover {
            border-color: #4CAF50;
            box-shadow: 0 4px 8px rgba(76, 175, 80, 0.2);
            transform: translateY(-2px);
        }
        .timepicker:focus {
            border-color: #4CAF50;
            box-shadow: 0 0 10px rgba(76, 175, 80, 0.4);
            outline: none;
        }
        .timepicker-container {
            position: relative;
            display: inline-flex;
            align-items: center;
            gap: 10px;
        }
        .timepicker-container::before {
            content: '🕒';
            position: absolute;
            left: 10px;
            top: 50%;
            transform: translateY(-50%);
            color: #4CAF50;
            font-size: 16px;
            pointer-events: none;
        }
        .timepicker-container .timepicker {
            padding-left: 35px;
        }
        .timepicker-save-button {
            background-color: #4CAF50;
            color: white;
            border: none;
            padding: 8px 12px;
            cursor: pointer;
            border-radius: 4px;
            font-size: 14px;
            transition: background-color 0.3s, transform 0.2s;
        }
        .timepicker-save-button:hover {
            background-color: #45a049;
            transform: translateY(-1px);
        }
        .timepicker-save-button:disabled {
            background-color: #cccccc;
            cursor: not-allowed;
        }
        .approve-btn {
            background-color: #4CAF50;
            color: white;
            border: none;
            padding: 8px 12px;
            cursor: pointer;
            border-radius: 4px;
            font-size: 14px;
            transition: background-color 0.3s;
        }
        .approve-btn:hover {
            background-color: #45a049;
        }
        .approve-btn.unapprove, .approve-btn.unmark-champ {
            background-color: #e74c3c;
        }
        .approve-btn.unapprove:hover, .approve-btn.unmark-champ:hover {
            background-color: #c0392b;
        }
        .edit-form label,
        .resources-form label,
        .media-form label {
            display: block;
            margin: 8px 0 4px;
            font-weight: bold;
            color: #333;
        }
        .edit-form input,
        .resources-form input[type="text"],
        .resources-form input[type="time"],
        .media-form input[type="text"],
        .media-form textarea {
            width: 100%;
            padding: 8px;
            margin-bottom: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
            box-sizing: border-box;
        }
        .edit-form input[type="submit"],
        .resources-form input[type="submit"],
        .media-form input[type="submit"] {
            background-color: #4CAF50;
            color: white;
            border: none;
            padding: 8px 16px;
            cursor: pointer;
            border-radius: 4px;
        }
        .edit-form input[type="submit"]:hover,
        .resources-form input[type="submit"]:hover,
        .media-form input[type="submit"]:hover {
            background-color: #45a049;
        }
        .resources-form .resource-item {
            margin: 8px 0;
            display: flex;
            align-items: center;
        }
        .resources-form input[type="checkbox"] {
            margin-right: 8px;
        }
        .confirmation-message {
            margin-top: 15px;
            padding: 12px;
            background-color: #e8f5e9;
            border-left: 4px solid #4CAF50;
            color: #333;
        }
        .confirmation-message ul {
            margin: 8px 0 0 16px;
            padding: 0;
        }
        .confirmation-message li {
            margin-bottom: 4px;
        }
        .trainer-select-container {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 8px;
            margin: 15px 0;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }
        .trainer-select-container > div {
            display: flex;
            align-items: center;
            gap: 8px;
            flex-wrap: wrap;
        }
        .trainer-note {
            color: #e74c3c;
            font-style: italic;
            margin-top: 4px;
            grid-column: 1 / -1;
        }
        .date-list {
            color: #2ecc71;
        }
        .no-dates {
            color: #f1c40f;
        }
        .duration-message {
            color: #333;
            font-size: 0.9em;
            grid-column: 1 / -1;
            display: none;
        }
        .media-form textarea {
            height: 120px;
            resize: vertical;
        }
        .media-form input[type="file"] {
            padding: 4px;
        }
        .media-preview img,
        .media-preview video {
            max-width: 120px;
            margin: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }
        .logout-button {
            background-color: #e74c3c;
            color: white;
            border: none;
            padding: 8px 16px;
            cursor: pointer;
            border-radius: 4px;
            font-size: 14px;
            text-decoration: none;
            position: absolute;
            top: 20px;
            right: 20px;
        }
        .logout-button:hover {
            background-color: #c0392b;
        }
        .roadmap-container {
            margin: 20px 0;
            padding: 20px;
            background: linear-gradient(135deg, #ffffff, #f1f9f4);
            border-radius: 10px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
            overflow-x: auto;
            position: relative;
        }
        .roadmap {
            display: flex;
            justify-content: space-between;
            align-items: center;
            position: relative;
            padding: 20px 0;
            min-width: 1000px;
            gap: 10px;
        }
        .roadmap::before {
            content: '';
            position: absolute;
            top: 50%;
            left: 20px;
            right: 20px;
            height: 6px;
            background: linear-gradient(to right, #e0e0e0, #d0d0d0);
            border-radius: 3px;
            transform: translateY(-50%);
            z-index: 1;
        }
        .roadmap-step {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            flex: 1;
            text-align: center;
            position: relative;
            z-index: 2;
            min-width: 70px;
            transition: transform 0.3s ease;
        }
        .roadmap-step.completed::before {
            content: '';
            position: absolute;
            top: 50%;
            left: 0;
            width: 100%;
            height: 6px;
            background: linear-gradient(to right, #4CAF50, #45a049);
            border-radius: 3px;
            transform: translateY(-50%);
            z-index: 1;
        }
        .roadmap-step .icon {
            width: 50px;
            height: 50px;
            background: linear-gradient(135deg, #e0e0e0, #d0d0d0);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 24px;
            color: #fff;
            margin-bottom: 10px;
            box-shadow: 0 2px 6px rgba(0, 0, 0, 0.2);
            transition: background 0.3s, transform 0.3s, box-shadow 0.3s;
        }
        .roadmap-step.completed .icon {
            background: linear-gradient(135deg, #4CAF50, #45a049);
            transform: scale(1.1);
            box-shadow: 0 4px 10px rgba(76, 175, 80, 0.4);
        }
        .roadmap-step.active .icon {
            background: linear-gradient(135deg, #2196F3, #1e88e5);
            transform: scale(1.2);
            box-shadow: 0 4px 12px rgba(33, 150, 243, 0.5);
        }
        .roadmap-step .label {
            font-size: 12px;
            color: #333;
            font-weight: 600;
            line-height: 1.3;
            max-width: 100px;
            word-wrap: break-word;
            font-family: 'Segoe UI', Arial, sans-serif;
        }
        .roadmap-step.completed .label {
            color: #4CAF50;
        }
        .roadmap-step.active .label {
            color: #2196F3;
        }
        .roadmap-step:hover {
            transform: translateY(-3px);
        }
        .roadmap-step:hover .icon {
            transform: scale(1.15);
            box-shadow: 0 6px 14px rgba(0, 0, 0, 0.25);
        }
        .roadmap-step:hover .label {
            color: #2196F3;
        }
        @media (max-width: 768px) {
            .roadmap-container {
                padding: 15px;
            }
            .roadmap {
                min-width: 600px;
                gap: 8px;
            }
            .roadmap-step {
                min-width: 50px;
            }
            .roadmap-step .icon {
                width: 40px;
                height: 40px;
                font-size: 20px;
            }
            .roadmap-step .label {
                font-size: 10px;
                max-width: 80px;
            }
            .roadmap::before,
            .roadmap-step.completed::before {
                height: 4px;
            }
        }
        @media (max-width: 480px) {
            .roadmap-step {
                min-width: 40px;
            }
            .roadmap-step .icon {
                width: 32px;
                height: 32px;
                font-size: 16px;
            }
            .roadmap-step .label {
                font-size: 8px;
                max-width: 60px;
            }
        }
        .view-sop-button,
        .download-sop-button {
            background: #4CAF50;
            color: white;
            border: none;
            padding: 8px 16px;
            cursor: pointer;
            border-radius: 4px;
            font-size: 14px;
            text-decoration: none;
            margin-right: 10px;
            transition: background-color 0.3s, transform 0.2s;
            display: inline-block;
        }
        .view-sop-button:hover,
        .download-sop-button:hover {
            background: #45a049;
            transform: translateY(-1px);
        }
        .sop-button-container {
            margin: 15px 0;
            text-align: center;
        }
        @media (max-width: 1200px) {
            .dashboard-container { padding: 15px; }
            .table-container { max-width: 100%; }
            .trainer-select-container { grid-template-columns: 1fr; }
            .logout-button { padding: 6px 12px; font-size: 12px; top: 10px; right: 10px; }
        }
        .delete-btn {
            background-color: #ff0000;
            color: white;
            border: none;
            padding: 8px 12px;
            cursor: pointer;
            border-radius: 4px;
            font-size: 14px;
            transition: background-color 0.3s;
        }
        .delete-btn:hover {
            background-color: #cc0000;
        }
        .status-info {
            margin-bottom: 15px;
            padding: 10px;
            background-color: #e8f5e9;
            border-left: 4px solid #4CAF50;
            border-radius: 4px;
        }
    </style>
</head>
<body>
    <div class="dashboard-container">
        <h2><%= schoolName %> Dashboard</h2>
        <div class="event-date <%= eventDateMissing ? 'missing' : '' %>">
            <% if (eventDateMissing) { %>
                Event date yet to confirm.
            <% } else { %>
                Event Date: <%= eventDate %>
            <% } %>
        </div>
        <% if (error) { %>
            <div class="error"><%= error %></div>
        <% } %>
        <a href="/logout" class="logout-button">Logout</a>
        <!-- Roadmap Section -->
        <div class="roadmap-container">
            <div class="roadmap">
                <div class="roadmap-step completed">
                    <div class="icon">📝</div>
                    <div class="label">School Register</div>
                </div>
                <div class="roadmap-step completed">
                    <div class="icon">✔️</div>
                    <div class="label">Being Lawful Team Approved By School</div>
                </div>
                <div class="roadmap-step completed">
                    <div class="icon">👥</div>
                    <div class="label">Student Registration</div>
                </div>
                <div class="roadmap-step completed">
                    <div class="icon">🏫</div>
                    <div class="label">School Approved By Student</div>
                </div>
                <div class="roadmap-step completed">
                    <div class="icon">🔐</div>
                    <div class="label">Student Login</div>
                </div>
                <div class="roadmap-step completed">
                    <div class="icon">🧪</div>
                    <div class="label">Trial Test</div>
                </div>
                <div class="roadmap-step completed">
                    <div class="icon">📚</div>
                    <div class="label">MCQ Test</div>
                </div>
                <div class="roadmap-step completed">
                    <div class="icon">🎓</div>
                    <div class="label">Certificate</div>
                </div>
                <div class="roadmap-step completed">
                    <div class="icon">🛠️</div>
                    <div class="label">Workshop</div>
                </div>
                <div class="roadmap-step completed">
                    <div class="icon">🌟</div>
                    <div class="label">Civic Activities</div>
                </div>
                <div class="roadmap-step completed">
                    <div class="icon">📸</div>
                    <div class="label">Photo Upload</div>
                </div>
                <div class="roadmap-step">
                    <div class="icon">⚖️</div>
                    <div class="label">Judiciary Select</div>
                </div>
                <div class="roadmap-step">
                    <div class="icon">🏆</div>
                    <div class="label">State Felicitation</div>
                </div>
            </div>
        </div>
        <!-- SOP Button -->
     <div class="sop-button-container">
    <a href="https://drive.google.com/file/d/1ie4LUGT0U-URgxFx7nnQc22mB04tVvQE/view?usp=sharing" target="_blank" class="view-sop-button">View SOP</a>
    <a href="https://drive.google.com/uc?export=download&id=1ie4LUGT0U-URgxFx7nnQc22mB04tVvQE" class="download-sop-button">Download SOP</a>
</div>
        <div class="tab-container">
            <div class="tab-buttons">
                <button class="tab-button active" onclick="openTab('resources')">Resource Arrangement</button>
                <button class="tab-button" onclick="openTab('student-data')">Student Data</button>
                <button class="tab-button" onclick="openTab('edit-info')">Edit School Information</button>
                <button class="tab-button" onclick="openTab('media-upload')">Media Upload</button>
            </div>
       <div id="resources" class="tab-content active">
    <% if (resourcesConfirmed) { %>
        <div class="confirmation-message">
            <h4 style="color: #4CAF50;">The school must ensure that event photos are uploaded in the “Media Upload” section for media coverage by Being Lawful officials.</h4>
            <p>You have confirmed the arrangement of the following resources:</p>
            <ul>
                <% selectedResources.forEach(resource => { %>
                    <li><%= resource %></li>
                <% }) %>
            </ul>
            <% if (typeof workshopStartTime !== 'undefined' && typeof workshopEndTime !== 'undefined' && workshopStartTime && workshopEndTime) { %>
                <p>Workshop Schedule: <%= workshopStartTime %> to <%= workshopEndTime %> (4-hour duration)</p>
            <% } %>
            <% if (selectedTrainers && selectedTrainers.length > 0) { %>
                <% selectedTrainers.forEach((trainer, index) => { %>
                    <p>Selected Trainer <%= index + 1 %>: <%= trainer.trainerName %> (<%= trainer.district %>)</p>
                    <% if (trainer.isOtherDistrict) { %>
                        <p class="trainer-note">Note: An additional ₹1000 + travel expenses will be charged for selecting a trainer from another district.</p>
                    <% } %>
                <% }) %>
            <% } %>
        </div>
    <% } else { %>
        <div class="resources-form">
            <form action="/school-dashboard/submit-resources" method="post">
                <input type="hidden" name="schoolEmail" value="<%= schoolEmail %>">
                <p>Please confirm the resources you agree to arrange or pay for:</p>
                <div class="resource-item">
                    <input type="checkbox" id="trainerRemediation" name="resources" value="Trainer remediation" checked required>
                    <label for="trainerRemediation">Trainer accomodation (if applicable)</label>
                </div>
                <div class="resource-item">
                    <input type="checkbox" id="workshopKit" name="resources" value="Rs 5000 workshop kit" checked required>
                    <label for="workshopKit">Rs 11000 Workshop Fees (includes student online MCQ test, online certificates for students who appeared in MCQ test, Workshop kit, Online Game Accesses, trainer remuneration, Trainer travelling cost)</label>
                </div>
                <div class="resource-item">
                    <input type="checkbox" id="mic" name="resources" value="Mic" checked required>
                    <label for="mic">Mic</label>
                </div>
                <div class="resource-item">
                    <input type="checkbox" id="cleanEnvironment" name="resources" value="Clean environment" checked required>
                    <label for="cleanEnvironment">Clean environment</label>
                </div>
                <div class="resource-item">
                    <input type="checkbox" id="seatingArrangement" name="resources" value="50 student seating arrangement" checked required>
                    <label for="seatingArrangement">50 student seating arrangement</label>
                </div>
                <div class="resource-item">
                    <input type="checkbox" id="projector" name="resources" value="Projector" checked required>
                    <label for="projector">Projector</label>
                </div>
                <div class="resource-item">
                    <input type="checkbox" id="travelingExpense" name="resources" value="Traveling expense" checked required>
                    <label for="travelingExpense">I agree to Pay this amount via Online or bank transfer to Being Lawful Team. (note: Please avoid any direct or cash transaction with trainers or co-ordinators. Being Lawful Team will not be responsible for any cash transaction between school and trainer.)</label>
                </div>
                <div class="resource-item">
                    <input type="checkbox" id="internetConnection" name="resources" value="Internet connection" checked required>
                    <label for="internetConnection">Internet connection</label>
                </div>
                <div class="resource-item">
                    <input type="checkbox" id="showAllTrainers" name="showAllTrainers" onchange="updateTrainerSelection()">
                    <label for="showAllTrainers">Show all trainers (including other districts)</label>
                </div>
                <div class="trainer-select-container">
                    <div>
                        <label for="trainerId1" class="trainer-label">Trainer 1:</label>
                        <select id="trainerId1" name="trainerId1" class="filter-select" required onchange="updateTrainerSelection()">
                            <option value="">Select a trainer</option>
                            <% trainers.forEach(trainer => { %>
                                <option value="<%= trainer.id %>" data-district="<%= trainer.district %>" data-dates='<%= JSON.stringify(trainer.availableDates || []) %>'>
                                    <%= trainer.trainerName %> (<%= trainer.district %>)
                                </option>
                            <% }) %>
                        </select>
                    </div>
                    <div>
                        <label for="trainerId2" class="trainer-label">Trainer 2:</label>
                        <select id="trainerId2" name="trainerId2" class="filter-select" required onchange="updateTrainerSelection()">
                            <option value="">Select a trainer</option>
                            <% trainers.forEach(trainer => { %>
                                <option value="<%= trainer.id %>" data-district="<%= trainer.district %>" data-dates='<%= JSON.stringify(trainer.availableDates || []) %>'>
                                    <%= trainer.trainerName %> (<%= trainer.district %>)
                                </option>
                            <% }) %>
                        </select>
                    </div>
                    <div>
                        <label for="workshopStartTime" class="trainer-label">Workshop Time:</label>
                        <div class="timepicker-container">
                            <input type="time" id="workshopStartTime" name="workshopStartTime" class="timepicker" required oninput="enableSaveButton()">
                            <button type="button" id="timepickerSaveButton" class="timepicker-save-button" onclick="updateEndTime()" disabled>Save</button>
                        </div>
                        <input type="hidden" name="workshopEndTime" id="workshopEndTime">
                    </div>
                    <div>
                        <label class="trainer-label">End Time:</label>
                        <span id="workshopEndTimeDisplay" style="margin-left: 10px;"></span>
                    </div>
                    <span id="durationMessage" class="duration-message">Workshop duration: 4 hours</span>
                    <p class="trainer-note" id="trainer1-dates" style="display: none;">
                        Available Dates for Trainer 1: <span id="trainer1-dates-list" class="date-list"></span>
                    </p>
                    <p class="trainer-note" id="trainer2-dates" style="display: none;">
                        Available Dates for Trainer 2: <span id="trainer2-dates-list" class="date-list"></span>
                    </p>
                    <p class="trainer-note" id="trainer-cost-note" style="display: none;">
                        Note: Selecting a trainer from another district will incur an additional ₹1000 + travel expenses.
                    </p>
                </div>
                <input type="submit" value="Confirm Resources and Trainer">
            </form>
        </div>
    <% } %>
</div>
            <div id="student-data" class="tab-content">
                <div class="status-info">
                    <p><strong>Total Students:</strong> <%= totalStudents %></p>
                    <p><strong>Students Completed MCQ:</strong> <%= mcqCompletedCount %></p>
                    <p><strong>Students Marked as Champions:</strong> <%= championCount %> (Max 50)</p>
                </div>
                <% if (students.length > 0) { %>
                    <div class="table-container">
                        <table id="studentTable">
                            <thead>
                                <tr>
                                    <th data-filter="studentName">Student Name<br><select class="filter-select" data-column="studentName" onchange="applyFilters('studentTable')"></select></th>
                                    <th data-filter="studentClass">Class<br><select class="filter-select" data-column="studentClass" onchange="applyFilters('studentTable')"></select></th>
                                    <th data-filter="trial1Percentage">Trial 1 (%)<br><select class="filter-select" data-column="trial1Percentage" onchange="applyFilters('studentTable')"></select></th>
                                    <th data-filter="trial2Percentage">Trial 2 (%)<br><select class="filter-select" data-column="trial2Percentage" onchange="applyFilters('studentTable')"></select></th>
                                    <th data-filter="hasCompletedMCQ">MCQ Completed<br><select class="filter-select" data-column="hasCompletedMCQ" onchange="applyFilters('studentTable')"></select></th>
                                    <th data-filter="score">MCQ Score<br><select class="filter-select" data-column="score" onchange="applyFilters('studentTable')"></select></th>
                                    <th data-filter="percentage">MCQ Percentage<br><select class="filter-select" data-column="percentage" onchange="applyFilters('studentTable')"></select></th>
                                    <th data-filter="completedAt">Completed At<br><select class="filter-select" data-column="completedAt" onchange="applyFilters('studentTable')"></select></th>
                                    <th>Approve</th>
                                    <th>Champion</th>
                                    <th>Action</th>
                                </tr>
                            </thead>
                            <tbody>
                                <% 
                                  // Sort students: champions first, then by score in descending order
                                  students.sort((a, b) => {
                                    if (a.isChampion && !b.isChampion) return -1;
                                    if (!a.isChampion && b.isChampion) return 1;
                                    return (b.score || 0) - (a.score || 0);
                                  }).forEach(student => { %>
                                    <tr>
                                        <td data-column="studentName"><%= student.studentName || 'N/A' %></td>
                                        <td data-column="studentClass"><%= student.studentClass || 'N/A' %></td>
                                        <td data-column="trial1Percentage">
                                            <%= student.trial1Percentage != null ? student.trial1Percentage : 'N/A' %>
                                        </td>
                                        <td data-column="trial2Percentage">
                                            <%= student.trial2Percentage != null ? student.trial2Percentage : 'N/A' %>
                                        </td>
                                        <td data-column="hasCompletedMCQ"><%= student.hasCompletedMCQ ? 'Yes' : 'No' %></td>
                                        <td data-column="score">
                                            <% if (student.score != null && student.totalQuestions != null) { %>
                                                <%= student.score %> / <%= student.totalQuestions %>
                                            <% } else if (student.score != null) { %>
                                                <%= student.score %> / ?
                                            <% } else if (student.totalQuestions != null) { %>
                                                ? / <%= student.totalQuestions %>
                                            <% } else { %>
                                                N/A
                                            <% } %>
                                        </td>
                                        <td data-column="percentage">
                                            <%= student.percentage != null ? `${student.percentage}%` : 'N/A' %>
                                        </td>
                                        <td data-column="completedAt"><%= student.completedAt || 'N/A' %></td>
                                        <td>
                                            <form action="/school-dashboard/approve-student/<%= student.id %>?username=<%= encodeURIComponent(schoolEmail) %>" method="POST" style="display:inline;">
                                                <input type="hidden" name="action" value="<%= student.isApproved ? 'unapprove' : 'approve' %>">
                                                <button type="submit" class="approve-btn <%= student.isApproved ? 'unapprove' : '' %>">
                                                    <%= student.isApproved ? 'Unapprove' : 'Approve' %>
                                                </button>
                                            </form>
                                        </td>
                                        <td>
                                            <form action="/school-dashboard/mark-champ/<%= student.id %>?username=<%= encodeURIComponent(schoolEmail) %>" method="POST" style="display:inline;">
                                                <input type="hidden" name="action" value="<%= student.isChampion ? 'unmark' : 'mark' %>">
                                                <button type="submit" class="approve-btn <%= student.isChampion ? 'unmark-champ' : '' %>">
                                                    <%= student.isChampion ? 'Remove Champ' : 'Mark Champ' %>
                                                </button>
                                            </form>
                                        </td>
                                        <td>
                                            <form action="/school-dashboard/delete-student/<%= student.id %>" method="POST" style="display:inline;">
                                                <input type="hidden" name="username" value="<%= schoolEmail %>">
                                                <button type="submit" class="delete-btn">Delete</button>
                                            </form>
                                        </td>
                                    </tr>
                                <% }) %>
                            </tbody>
                        </table>
                    </div>
                    <script>
                        console.log('Students data:', <%- JSON.stringify(students) %>);
                    </script>
                <% } else { %>
                    <p>No students found for this school.</p>
                <% } %>
            </div>
            <div id="edit-info" class="tab-content">
                <div class="edit-form">
                    <form action="/school-dashboard/update" method="POST">
                        <input type="hidden" name="schoolEmail" value="<%= schoolEmail %>">
                        <label for="city">City:</label>
                        <input type="text" id="city" name="city" value="<%= city %>" required>
                        <label for="district">District:</label>
                        <input type="text" id="district" name="district" value="<%= district %>" required>
                        <label for="pincode">Pincode:</label>
                        <input type="text" id="pincode" name="pincode" value="<%= pincode %>" pattern="\d{6}" required>
                        <label for="schoolPhoneNumber">School Phone Number:</label>
                        <input type="text" id="schoolPhoneNumber" name="schoolPhoneNumber" value="<%= schoolPhoneNumber %>" pattern="\d{10}" required>
                        <label for="schoolEmail">School Email:</label>
                        <input type="email" id="schoolEmailDisplay" name="schoolEmailDisplay" value="<%= schoolEmail %>" disabled>
                        <label for="principalNumber">Principal Phone Number:</label>
                        <input type="text" id="principalNumber" name="principalNumber" value="<%= principalNumber %>" pattern="\d{10}" required>
                        <label for="principalEmail">Principal Email:</label>
                        <input type="email" id="principalEmail" name="principalEmail" value="<%= principalEmail %>" required>
                        <label for="civicsTeacherNumber">Civics Teacher Phone Number:</label>
                        <input type="text" id="civicsTeacherNumber" name="civicsTeacherNumber" value="<%= civicsTeacherNumber %>" pattern="\d{10}" required>
                        <label for="civicsTeacherEmail">Civics Teacher Email:</label>
                        <input type="email" id="civicsTeacherEmail" name="civicsTeacherEmail" value="<%= civicsTeacherEmail %>" required>
                        <input type="submit" value="Update Information">
                    </form>
                </div>
            </div>
            <div id="media-upload" class="tab-content">
                <div class="media-form">
                    <form action="/school-dashboard/upload-media" method="POST" enctype="multipart/form-data">
                        <input type="hidden" name="schoolEmail" value="<%= schoolEmail %>">
                        <label for="mediaDescription">Media Description (up to 1000 words):</label>
                        <textarea id="mediaDescription" name="mediaDescription" maxlength="1000" placeholder="Describe the media coverage or event (up to 1000 words)"></textarea>
                        <label for="mediaLink">Media Link (optional):</label>
                        <input type="text" id="mediaLink" name="mediaLink" placeholder="Enter a URL for media coverage">
                        <label>Upload Photos (up to 10, max 5MB each):</label>
                        <% for (let i = 1; i <= 10; i++) { %>
                            <div class="resource-item">
                                <label for="photo<%= i %>">Photo <%= i %>:</label>
                                <input type="file" id="photo<%= i %>" name="photos" accept="image/*">
                            </div>
                        <% } %>
                        <label>Upload Videos (up to 5, max 10MB each):</label>
                        <% for (let i = 1; i <= 5; i++) { %>
                            <div class="resource-item">
                                <label for="video<%= i %>">Video <%= i %>:</label>
                                <input type="file" id="video<%= i %>" name="videos" accept="video/*">
                            </div>
                        <% } %>
                        <input type="submit" value="Upload Media">
                    </form>
                    <div class="media-preview">
                        <% if (mediaUploads && mediaUploads.length > 0) { %>
                            <h3>Uploaded Media</h3>
                            <% mediaUploads.forEach(upload => { %>
                                <div>
                                    <% if (upload.type === 'image') { %>
                                        <img src="<%= upload.url %>" alt="Uploaded Photo" style="max-width: 120px;">
                                    <% } else { %>
                                        <video src="<%= upload.url %>" controls style="max-width: 120px;"></video>
                                    <% } %>
                                    <p><%= upload.description ? upload.description.substring(0, 100) + '...' : 'No description' %></p>
                                    <% if (upload.link) { %>
                                        <a href="<%= upload.link %>" target="_blank">View Link</a>
                                    <% } %>
                                </div>
                            <% }) %>
                        <% } else { %>
                            <p>No media uploads available.</p>
                        <% } %>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <script>
        // Firebase configuration (replace with your actual Firebase config)
        const firebaseConfig = {
            apiKey: "your-api-key",
            authDomain: "your-auth-domain",
            projectId: "your-project-id",
            storageBucket: "your-storage-bucket",
            messagingSenderId: "your-messaging-sender-id",
            appId: "your-app-id"
        };

        // Initialize Firebase
        firebase.initializeApp(firebaseConfig);
        const db = firebase.firestore();

        // Define allTrainers and students before usage
        const allTrainers = <%- JSON.stringify(trainers) %>;
        const schoolDistrict = "<%= district %>".trim();
        let students = <%- JSON.stringify(students) %>;

        document.addEventListener('DOMContentLoaded', function () {
            console.log('DOM loaded, initializing student-data tab');
            openTab('student-data');
            populateTrainerSelects();
            loadWorkshopTimes();
        });

        function openTab(tabId) {
            document.querySelectorAll('.tab-content').forEach(tab => {
                tab.classList.remove('active');
            });
            document.querySelectorAll('.tab-button').forEach(button => {
                button.classList.remove('active');
            });
            const tab = document.getElementById(tabId);
            if (tab) {
                tab.classList.add('active');
                const button = document.querySelector(`.tab-button[onclick="openTab('${tabId}')"]`);
                if (button) button.classList.add('active');
            }

            if (tabId === 'student-data') {
                initializeFilters('studentTable');
            }
            if (tabId === 'resources') {
                updateTrainerSelection();
            }
        }

        async function loadWorkshopTimes() {
            try {
                const schoolRef = db.collection('schools').doc('<%= schoolEmail %>');
                const schoolDoc = await schoolRef.get();

                if (schoolDoc.exists) {
                    const data = schoolDoc.data();
                    if (data.workshopStartTime) {
                        document.getElementById('workshopStartTime').value = data.workshopStartTime;
                    }
                    if (data.workshopEndTime) {
                        document.getElementById('workshopEndTimeDisplay').textContent = data.workshopEndTime;
                        document.getElementById('workshopEndTime').value = data.workshopEndTime;
                        document.getElementById('durationMessage').style.display = 'block';
                    }
                }
            } catch (error) {
                console.error('Error loading workshop times:', error);
            }
        }

        function initializeFilters(tableId) {
            const table = document.getElementById(tableId);
            if (!table) return;

            const headers = table.querySelectorAll('th[data-filter]');
            const rows = table.querySelectorAll('tbody tr');

            headers.forEach(header => {
                const column = header.dataset.filter;
                const select = header.querySelector('.filter-select');
                if (!select) return;

                const numericalColumns = ['trial1Percentage', 'trial2Percentage', 'score', 'percentage'];
                if (numericalColumns.includes(column)) {
                    const ranges = ['All', '0-25', '26-50', '51-75', '76-100', 'N/A'];
                    ranges.forEach(range => {
                        const option = document.createElement('option');
                        option.value = range;
                        option.textContent = range;
                        select.appendChild(option);
                    });
                } else {
                    const values = new Set(['All']);
                    rows.forEach(row => {
                        const cell = row.querySelector(`td[data-column="${column}"]`);
                        if (cell) {
                            let cellText = cell.textContent.trim();
                            if (cellText && !values.has(cellText)) {
                                values.add(cellText);
                            }
                        }
                    });

                    [...values].sort().forEach(value => {
                        const option = document.createElement('option');
                        option.value = value;
                        option.textContent = value;
                        select.appendChild(option);
                    });
                }

                select.addEventListener('change', () => applyFilters(tableId));
            });
        }

        function applyFilters(tableId) {
            const table = document.getElementById(tableId);
            if (!table) return;

            const rows = table.querySelectorAll('tbody tr');
            const filters = {};
            table.querySelectorAll('.filter-select').forEach(select => {
                filters[select.dataset.column] = select.value.trim();
            });

            rows.forEach(row => {
                let show = true;
                for (const [column, value] of Object.entries(filters)) {
                    if (value && value !== 'All' && value !== '') {
                        const cell = row.querySelector(`td[data-column="${column}"]`);
                        if (cell) {
                            let cellText = cell.textContent.trim();
                            const numericalColumns = ['trial1Percentage', 'trial2Percentage', 'score', 'percentage'];

                            if (numericalColumns.includes(column)) {
                                if (value === 'N/A') {
                                    show = cellText === 'N/A';
                                } else if (cellText !== 'N/A') {
                                    let cellValue;
                                    if (column === 'score') {
                                        cellValue = parseFloat(cellText.split('/')[0].trim());
                                    } else {
                                        cellValue = parseFloat(cellText.replace('%', ''));
                                    }

                                    const [min, max] = value.split('-').map(Number);
                                    if (isNaN(cellValue) || cellValue < min || (max && cellValue > max)) {
                                        show = false;
                                    }
                                } else {
                                    show = false;
                                }
                            } else if (cellText !== value) {
                                show = false;
                            }
                        } else {
                            show = false;
                        }
                    }
                    if (!show) break;
                }
                row.style.display = show ? '' : 'none';
            });
        }

        function populateTrainerSelects() {
            updateTrainerSelection();
        }

        function updateTrainerSelection() {
            const trainer1Select = document.getElementById('trainerId1');
            const trainer2Select = document.getElementById('trainerId2');
            const showAllTrainers = document.getElementById('showAllTrainers')?.checked;

            if (!trainer1Select || !trainer2Select) return;

            const trainer1Value = trainer1Select.value;
            const trainer2Value = trainer2Select.value;

            const filteredTrainers = showAllTrainers
                ? allTrainers
                : allTrainers.filter(t => t.district === schoolDistrict);

            [trainer1Select, trainer2Select].forEach(select => {
                const currentValue = select.value;
                select.innerHTML = '<option value="">Select a trainer</option>';
                filteredTrainers.forEach(trainer => {
                    const option = document.createElement('option');
                    option.value = trainer.id;
                    option.text = `${trainer.trainerName} (${trainer.district})`;
                    option.setAttribute('data-district', trainer.district);
                    option.setAttribute('data-dates', JSON.stringify(trainer.availableDates || []));
                    select.appendChild(option);
                });
                select.value = currentValue;
            });

            if (trainer1Value && trainer2Value && trainer1Value === trainer2Value) {
                alert('Please select different trainers for Trainer 1 and Trainer 2.');
                if (trainer1Select.value === trainer2Value) trainer1Select.value = '';
                if (trainer2Select.value === trainer1Value) trainer2Select.value = '';
            }

            updateTrainerDatesDisplay();
            updateCostNoteDisplay();
        }

        function updateTrainerDatesDisplay() {
            const trainer1Select = document.getElementById('trainerId1');
            const trainer2Select = document.getElementById('trainerId2');
            const trainer1DatesDiv = document.getElementById('trainer1-dates');
            const trainer2DatesDiv = document.getElementById('trainer2-dates');
            const trainer1DatesList = document.getElementById('trainer1-dates-list');
            const trainer2DatesList = document.getElementById('trainer2-dates-list');

            if (!trainer1Select || !trainer2Select || !trainer1DatesDiv || !trainer2DatesDiv || !trainer1DatesList || !trainer2DatesList) return;

            if (trainer1Select.value) {
                const selectedOption1 = trainer1Select.options[trainer1Select.selectedIndex];
                const dates1 = JSON.parse(selectedOption1.getAttribute('data-dates') || '[]');
                trainer1DatesList.textContent = dates1.length > 0 ? dates1.join(', ') : 'No dates available';
                trainer1DatesDiv.style.display = 'block';
            } else {
                trainer1DatesDiv.style.display = 'none';
            }

            if (trainer2Select.value) {
                const selectedOption2 = trainer2Select.options[trainer2Select.selectedIndex];
                const dates2 = JSON.parse(selectedOption2.getAttribute('data-dates') || '[]');
                trainer2DatesList.textContent = dates2.length > 0 ? dates2.join(', ') : 'No dates available';
                trainer2DatesDiv.style.display = 'block';
            } else {
                trainer2DatesDiv.style.display = 'none';
            }
        }

        function updateCostNoteDisplay() {
            const trainer1Select = document.getElementById('trainerId1');
            const trainer2Select = document.getElementById('trainerId2');
            const costNote = document.getElementById('trainer-cost-note');

            if (!trainer1Select || !trainer2Select || !costNote) return;

            const trainer1District = trainer1Select.selectedOptions[0]?.getAttribute('data-district') || '';
            const trainer2District = trainer2Select.selectedOptions[0]?.getAttribute('data-district') || '';

            costNote.style.display = (trainer1District && trainer1District !== schoolDistrict) || (trainer2District && trainer2District !== schoolDistrict)
                ? 'block'
                : 'none';
        }

        function enableSaveButton() {
            const startTimeInput = document.getElementById('workshopStartTime');
            const saveButton = document.getElementById('timepickerSaveButton');
            if (startTimeInput && saveButton) {
                saveButton.disabled = !startTimeInput.value;
            }
        }

        async function updateEndTime() {
            const startTimeInput = document.getElementById('workshopStartTime');
            const endTimeInput = document.getElementById('workshopEndTime');
            const endTimeDisplay = document.getElementById('workshopEndTimeDisplay');
            const durationMessage = document.getElementById('durationMessage');
            const schoolEmail = "<%= schoolEmail %>";

            if (!startTimeInput || !endTimeInput || !endTimeDisplay || !durationMessage) return;

            if (startTimeInput.value) {
                const startTime = new Date(`1970-01-01T${startTimeInput.value}:00`);
                startTime.setHours(startTime.getHours() + 4);
                const hours = String(startTime.getHours()).padStart(2, '0');
                const minutes = String(startTime.getMinutes()).padStart(2, '0');
                const endTime = `${hours}:${minutes}`;
                endTimeInput.value = endTime;
                endTimeDisplay.textContent = endTime;
                durationMessage.style.display = 'block';

                try {
                    const schoolRef = db.collection('schools').doc(schoolEmail);
                    await schoolRef.update({
                        workshopStartTime: startTimeInput.value,
                        workshopEndTime: endTime
                    });
                    alert('Workshop time saved successfully!');
                } catch (error) {
                    console.error('Error saving workshop time:', error);
                    alert('Error saving workshop time. Please try again.');
                }
            } else {
                endTimeInput.value = '';
                endTimeDisplay.textContent = '';
                durationMessage.style.display = 'none';
            }
        }
    </script>
</body>
</html>