<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <title>Coordinator Dashboard</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        .tab-content { display: none; }
        .tab-content.active { display: block; }
        .status-pending { color: #fd7e14; font-weight: 600; }
        .status-pack { color: #007bff; font-weight: 600; }
        .status-delivered { color: #28a745; font-weight: 600; }
        .status-inprogress { color: #17a2b8; font-weight: 600; }
        .status-register { color: #6f42c1; font-weight: 600; }
        .status-done { color: #28a745; font-weight: 600; }
        .status-notinterested { color: #dc3545; font-weight: 600; }
        .status-approved-mcq-remaining { color: #ffc107; font-weight: 600; }
        .status-registered-not-approved { color: #dc3545; font-weight: 600; }
        .filter-select { padding: 0.25rem; margin-top: 0.25rem; width: 100%; }
        .tab-link {
            transition: background-color 0.3s ease, transform 0.2s ease;
        }
        .tab-link:hover {
            background-color: #4b5563;
            transform: scale(1.05);
        }
        .tab-link.active {
            background-color: #2563eb;
            transform: scale(1.05);
            color: white;
        }
        .error-border { border-color: #dc3545 !important; }
        .field-error { color: #dc3545; font-size: 0.875rem; margin-top: 0.25rem; }
    </style>
</head>
<body class="bg-gray-100 flex min-h-screen">
    <div class="w-64 bg-gray-800 text-white p-6 fixed h-full">
        <h2 class="text-xl font-bold border-b border-gray-600 pb-2 mb-4">Coordinator Portal</h2>
        <ul class="space-y-2">
            <li><a href="#dashboard" class="tab-link block px-4 py-2 hover:bg-gray-700 rounded text-white font-medium">Dashboard</a></li>
            <li><a href="#visited-school" class="tab-link block px-4 py-2 hover:bg-gray-700 rounded text-white font-medium">Visited School</a></li>
            <li><a href="#complete-school" class="tab-link block px-4 py-2 hover:bg-gray-700 rounded text-white font-medium">Complete School</a></li>
            <li><a href="#coordinator-summary" class="tab-link block px-4 py-2 hover:bg-gray-700 rounded text-white font-medium active">Coordinator Summary</a></li>
            <li><a href="#sop" class="tab-link block px-4 py-2 hover:bg-gray-700 rounded text-white font-medium">SOP</a></li>
            <li><a href="#workshop-summary" class="tab-link block px-4 py-2 hover:bg-gray-700 rounded text-white font-medium">Workshop Summary</a></li>
            <li><a href="#upload-media" class="tab-link block px-4 py-2 hover:bg-gray-700 rounded text-white font-medium">Upload Media</a></li>
            <li><a href="#student-feedback" class="tab-link block px-4 py-2 hover:bg-gray-700 rounded text-white font-medium">Student Feedback Form</a></li>
            <li><a href="/logout" class="block px-4 py-2 bg-red-500 hover:bg-red-600 rounded text-white font-medium">Logout</a></li>
        </ul>
    </div>

    <div class="ml-64 p-6 w-full">
        <h1 class="text-2xl font-bold mb-4">Welcome, <%= coordinator?.name || 'Coordinator' %>!</h1>

        <% if (typeof error !== 'undefined' && error) { %>
            <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
                <%= error %>
            </div>
        <% } %>
        <% if (typeof success !== 'undefined' && success) { %>
            <div class="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded mb-4">
                <%= success %>
            </div>
        <% } %>

        <!-- Dashboard Tab -->
        <div id="dashboard" class="tab-content">
            <h3 class="text-xl font-semibold mb-4">Approved Schools</h3>
            <div class="overflow-x-auto">
                <table class="min-w-full bg-white shadow-md rounded-lg">
                    <thead class="bg-gray-700 text-white">
                        <tr>
                            <th class="py-3 px-4 text-left">School Name</th>
                            <th class="py-3 px-4 text-left">Civics Sir Number</th>
                            <th class="py-3 px-4 text-left">School Phone Number</th>
                            <th class="py-3 px-4 text-left">Principal Number</th>
                            <th class="py-3 px-4 text-left">City</th>
                            <th class="py-3 px-4 text-left">District</th>
                            <th class="py-3 px-4 text-left">Event Date</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% if (!schools || schools.length === 0) { %>
                            <tr><td colspan="7" class="py-3 px-4 text-center">No schools found.</td></tr>
                        <% } else { %>
                            <% schools.forEach(school => { %>
                                <tr class="border-b">
                                    <td class="py-3 px-4"><%= school.name || 'N/A' %></td>
                                    <td class="py-3 px-4"><%= school.civicsSirNumber || 'N/A' %></td>
                                    <td class="py-3 px-4"><%= school.schoolPhoneNumber || 'N/A' %></td>
                                    <td class="py-3 px-4"><%= school.principalNumber || 'N/A' %></td>
                                    <td class="py-3 px-4"><%= school.city || 'N/A' %></td>
                                    <td class="py-3 px-4"><%= school.district || 'N/A' %></td>
                                    <td class="py-3 px-4"><%= school.eventDate || 'Not set' %></td>
                                </tr>
                            <% }); %>
                        <% } %>
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Visited Schools Tab -->
        <div id="visited-school" class="tab-content">
            <h3 class="text-xl font-semibold mb-4">Visited Schools</h3>
            <div class="overflow-x-auto">
                <table class="min-w-full bg-white shadow-md rounded-lg">
                    <thead class="bg-gray-700 text-white">
                        <tr>
                            <th class="py-3 px-4 text-left">School Name</th>
                            <th class="py-3 px-4 text-left">Personal Number</th>
                            <th class="py-3 px-4 text-left">Principal Number</th>
                            <th class="py-3 px-4 text-left">Email</th>
                            <th class="py-3 px-4 text-left">Status</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% if (!visitedSchools || visitedSchools.length === 0) { %>
                            <tr><td colspan="5" class="py-3 px-4 text-center">No visited schools found.</td></tr>
                        <% } else { %>
                            <% visitedSchools.forEach(school => { %>
                                <tr class="border-b">
                                    <td class="py-3 px-4"><%= school.name || 'N/A' %></td>
                                    <td class="py-3 px-4"><%= school.number || 'N/A' %></td>
                                    <td class="py-3 px-4"><%= school.principalNumber || 'N/A' %></td>
                                    <td class="py-3 px-4"><%= school.email || 'N/A' %></td>
                                    <td class="py-3 px-4">
                                        <form method="POST" action="/update-status-visited" class="update-status-form flex space-x-2" data-id="<%= school.id %>">
                                            <input type="hidden" name="id" value="<%= school.id %>">
                                            <select name="status" class="border rounded px-2 py-1 filter-select">
                                                <option value="inprogress" <%= school.status === 'inprogress' ? 'selected' : '' %>>In Progress</option>
                                                <option value="register" <%= school.status === 'register' ? 'selected' : '' %>>Register</option>
                                                <option value="done" <%= school.status === 'done' ? 'selected' : '' %>>Done</option>
                                                <option value="notinterested" <%= school.status === 'notinterested' ? 'selected' : '' %>>Not Interested</option>
                                            </select>
                                            <button type="submit" class="bg-blue-500 hover:bg-blue-600 text-white px-3 py-1 rounded">Update</button>
                                        </form>
                                    </td>
                                </tr>
                            <% }); %>
                        <% } %>
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Complete Schools Tab -->
        <div id="complete-school" class="tab-content">
            <h3 class="text-xl font-semibold mb-4">Completed Schools</h3>
            <form method="GET" action="/coordinator-dashboard" class="mb-4">
                <label for="trainerIdComplete" class="block text-sm font-medium text-gray-700">Filter by Trainer</label>
                <select name="trainerId" id="trainerIdComplete" class="border rounded px-2 py-1 mr-2">
                    <option value="">All Trainers</option>
                    <% if (trainers && trainers.length > 0) { %>
                        <% trainers.forEach(trainer => { %>
                            <option value="<%= trainer.id %>" <%= trainerId === trainer.id ? 'selected' : '' %>><%= trainer.name || 'Unknown Trainer' %></option>
                        <% }); %>
                    <% } %>
                </select>
                <button type="submit" class="bg-blue-500 hover:bg-blue-600 text-white px-3 py-1 rounded">Filter</button>
            </form>
            <div class="overflow-x-auto">
                <table class="min-w-full bg-white shadow-md rounded-lg">
                    <thead class="bg-gray-700 text-white">
                        <tr>
                            <th class="py-3 px-4 text-left">School Name</th>
                            <th class="py-3 px-4 text-left">Principal</th>
                            <th class="py-3 px-4 text-left">Phone Number</th>
                            <th class="py-3 px-4 text-left">Email</th>
                            <th class="py-3 px-4 text-left">Contact Person Number</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% if (!completedSchools || completedSchools.length === 0) { %>
                            <tr><td colspan="5" class="py-3 px-4 text-center">No completed schools found.</td></tr>
                        <% } else { %>
                            <% completedSchools.forEach(school => { %>
                                <tr class="border-b">
                                    <td class="py-3 px-4"><%= school.name || 'N/A' %></td>
                                    <td class="py-3 px-4"><%= school.principalName || school.principalNumber || 'N/A' %></td>
                                    <td class="py-3 px-4"><%= school.schoolPhoneNumber || 'N/A' %></td>
                                    <td class="py-3 px-4"><%= school.email || 'N/A' %></td>
                                    <td class="py-3 px-4"><%= school.contactPersonNumber || school.principalNumber || 'N/A' %></td>
                                </tr>
                            <% }); %>
                        <% } %>
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Coordinator Summary Tab -->
        <div id="coordinator-summary" class="tab-content active">
            <h3 class="text-xl font-semibold mb-4">Workshop Summary for <%= coordinator.name %></h3>
            <div class="overflow-x-auto">
                <table id="coordinatorSummaryTable" class="min-w-full bg-white shadow-md rounded-lg">
                    <thead class="bg-gray-700 text-white">
                        <tr>
                            <th class="py-3 px-4 text-left" data-filter="schoolName">School Name<br><select class="filter-select text-sm" data-column="schoolName"></select></th>
                            <th class="py-3 px-4 text-left">Event Date</th>
                            <th class="py-3 px-4 text-left">Day</th>
                            <th class="py-3 px-4 text-left">Trainer Name</th>
                            <th class="py-3 px-4 text-left">Time Slot</th>
                            <th class="py-3 px-4 text-left">Trainer Occupied</th>
                            <th class="py-3 px-4 text-left" data-filter="registerStatus">Our Register School<br><select class="filter-select text-sm" data-column="registerStatus"></select></th>
                            <th class="py-3 px-4 text-left" data-filter="mcqStatus">MCQ Status<br><select class="filter-select text-sm" data-column="mcqStatus"></select></th>
                            <th class="py-3 px-4 text-left" data-filter="approvalStatus">Approval Status<br><select class="filter-select text-sm" data-column="approvalStatus"></select></th>
                            <th class="py-3 px-4 text-left">Materials Sent?</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% 
                            const allSchools = [
                                ...schools.map(s => ({ 
                                    ...s, 
                                    source: 'approved',
                                    registerStatus: s.registerStatus || 'Yes',
                                    mcqStatus: s.mcqStatus || 'Pending',
                                    approvalStatus: s.mcqStatus === 'Completed' ? 'Approved' : 'Approved, MCQ Remaining'
                                })),
                                ...completedSchools.map(s => ({
                                    id: s.id,
                                    name: s.name,
                                    eventDate: s.eventDate || 'Not set',
                                    trainerId1: s.trainerId1 || null,
                                    trainerId2: s.trainerId2 || null,
                                    workshopStartTime: s.workshopStartTime || null,
                                    workshopEndTime: s.workshopEndTime || null,
                                    resourcesConfirmed: s.resourcesConfirmed || false,
                                    coordinatorId: s.coordinatorId || coordinator.id,
                                    status: 'completed',
                                    source: 'completed',
                                    registerStatus: 'Yes',
                                    mcqStatus: s.mcqStatus || 'Completed',
                                    approvalStatus: 'Approved'
                                })),
                                ...visitedSchools.filter(s => s.status === 'register').map(s => ({
                                    id: s.id,
                                    name: s.name,
                                    eventDate: s.eventDate || 'Not set',
                                    trainerId1: null,
                                    trainerId2: null,
                                    workshopStartTime: null,
                                    workshopEndTime: null,
                                    resourcesConfirmed: false,
                                    coordinatorId: coordinator.id,
                                    status: 'registered',
                                    source: 'visited',
                                    registerStatus: 'Yes',
                                    mcqStatus: 'Pending',
                                    approvalStatus: 'Registered, Not Approved'
                                }))
                            ].filter(s => s.coordinatorId === coordinator.id);
                        %>
                        <% if (allSchools.length > 0) { %>
                            <% allSchools.forEach(school => { %>
                                <tr class="border-b">
                                    <td class="py-3 px-4" data-column="schoolName"><%= school.name %></td>
                                    <td class="py-3 px-4"><%= school.eventDate !== 'Not set' ? school.eventDate : 'Not assigned' %></td>
                                    <td class="py-3 px-4"><%= school.eventDate !== 'Not set' ? new Date(school.eventDate).toLocaleString('en-US', { timeZone: 'Asia/Kolkata', weekday: 'long' }) : 'N/A' %></td>
                                    <td class="py-3 px-4">
                                        <% let trainer1 = school.trainerId1 && trainers.find(t => t.id === school.trainerId1); %>
                                        <% let trainer2 = school.trainerId2 && trainers.find(t => t.id === school.trainerId2); %>
                                        <%= trainer1 ? trainer1.name : 'Not Assigned' %><%= trainer2 ? ', ' + trainer2.name : '' %>
                                    </td>
                                    <td class="py-3 px-4">
                                        <% if (school.workshopStartTime && school.workshopEndTime) { %>
                                            <%= school.workshopStartTime %> - <%= school.workshopEndTime %>
                                        <% } else { %>
                                            Not Assigned
                                        <% } %>
                                    </td>
                                    <td class="py-3 px-4"><%= (school.trainerId1 || school.trainerId2) ? 'Yes' : 'No' %></td>
                                    <td class="py-3 px-4" data-column="registerStatus"><%= school.registerStatus %></td>
                                    <td class="py-3 px-4" data-column="mcqStatus"><%= school.mcqStatus %></td>
                                    <td class="py-3 px-4" data-column="approvalStatus">
                                        <% if (school.approvalStatus === 'Approved, MCQ Remaining') { %>
                                            <span class="status-approved-mcq-remaining"><%= school.approvalStatus %></span>
                                        <% } else if (school.approvalStatus === 'Registered, Not Approved') { %>
                                            <span class="status-registered-not-approved"><%= school.approvalStatus %></span>
                                        <% } else { %>
                                            <%= school.approvalStatus %>
                                        <% } %>
                                    </td>
                                    <td class="py-3 px-4"><%= school.resourcesConfirmed ? 'Yes' : 'No' %></td>
                                </tr>
                            <% }) %>
                        <% } else { %>
                            <tr><td colspan="10" class="py-3 px-4 text-center">No workshops assigned to you.</td></tr>
                        <% } %>
                    </tbody>
                </table>
            </div>
        </div>

        <!-- SOP Tab -->
        <div id="sop" class="tab-content">
            <h3 class="text-xl font-semibold mb-4">Standard Operating Procedure</h3>
            <div class="space-y-4">
                <div class="flex space-x-4">
                    <a href="https://drive.google.com/file/d/1s4alRAcycaWQix_4sONdCM7Z4NKSzIR9/view" target="_blank" class="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded">View SOP</a>
                    <a href="https://drive.google.com/uc?export=download&id=1s4alRAcycaWQix_4sONdCM7Z4NKSzIR9" class="bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded">Download SOP</a>
                </div>
            </div>
        </div>

        <!-- Workshop Summary Tab -->
   <!-- Workshop Summary Tab -->
<div id="workshop-summary" class="tab-content">
    <h3 class="text-xl font-semibold mb-4">Being Lawful Workshop Summary Form</h3>
    <div id="successMessage" class="hidden bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded mb-4"></div>
    <div id="errorMessage" class="hidden bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4"></div>
    <form method="POST" action="/submit-workshop-summary" id="workshopSummaryForm" class="space-y-6 bg-white p-6 rounded-lg shadow-md">
        <p class="text-sm text-gray-600 italic">To be filled by Coordinator</p>

        <!-- School Details -->
        <div>
            <h4 class="text-lg font-medium mb-2">School Details</h4>
            <div class="grid grid-cols-1 gap-4">
                <div>
                    <label for="schoolName" class="block text-sm font-medium text-gray-700">School Name</label>
                    <select id="schoolName" name="schoolName" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm p-2" required>
                        <option value="">Select a School</option>
                        <% allSchools.forEach(school => { %>
                            <option value="<%= school.name %>"><%= school.name %></option>
                        <% }) %>
                    </select>
                    <span id="schoolNameError" class="field-error hidden"></span>
                </div>
                <div>
                    <label for="schoolAddress" class="block text-sm font-medium text-gray-700">School Address</label>
                    <textarea id="schoolAddress" name="schoolAddress" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm p-2" required></textarea>
                    <span id="schoolAddressError" class="field-error hidden"></span>
                </div>
                <div>
                    <label for="workshopDate" class="block text-sm font-medium text-gray-700">Workshop Date</label>
                    <input type="date" id="workshopDate" name="workshopDate" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm p-2" required>
                    <span id="workshopDateError" class="field-error hidden"></span>
                </div>
            </div>
        </div>

        <!-- Team Details -->
        <div>
            <h4 class="text-lg font-medium mb-2">Team Details</h4>
            <div class="grid grid-cols-1 gap-4">
                <div>
                    <label for="trainer1" class="block text-sm font-medium text-gray-700">Trainer 1</label>
                    <input type="text" id="trainer1" name="trainer1" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm p-2" required>
                    <span id="trainer1Error" class="field-error hidden"></span>
                </div>
                <div>
                    <label for="trainer2" class="block text-sm font-medium text-gray-700">Trainer 2 (if any)</label>
                    <input type="text" id="trainer2" name="trainer2" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm p-2">
                </div>
                <div>
                    <label for="coordinatorName" class="block text-sm font-medium text-gray-700">Coordinator Name</label>
                    <input type="text" id="coordinatorName" name="coordinatorName" value="<%= coordinator?.name || '' %>" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm p-2" required>
                    <span id="coordinatorNameError" class="field-error hidden"></span>
                </div>
                <div>
                    <label for="techSupport" class="block text-sm font-medium text-gray-700">Tech Support (if assigned)</label>
                    <input type="text" id="techSupport" name="techSupport" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm p-2">
                </div>
                <div>
                    <label for="principalName" class="block text-sm font-medium text-gray-700">School Principal Name</label>
                    <input type="text" id="principalName" name="principalName" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm p-2" required>
                    <span id="principalNameError" class="field-error hidden"></span>
                </div>
            </div>
        </div>

        <!-- Financial Details -->
        <div>
            <h4 class="text-lg font-medium mb-2">Financial Details</h4>
            <div class="grid grid-cols-1 gap-4">
                <div>
                    <label class="block text-sm font-medium text-gray-700">Financial Status</label>
                    <div class="mt-2 space-x-4">
                        <label class="inline-flex items-center">
                            <input type="radio" name="financialStatus" value="Done" class="form-radio" required>
                            <span class="ml-2">Done</span>
                        </label>
                        <label class="inline-flex items-center">
                            <input type="radio" name="financialStatus" value="Partial Done" class="form-radio">
                            <span class="ml-2">Partial Done</span>
                        </label>
                        <label class="inline-flex items-center">
                            <input type="radio" name="financialStatus" value="Partial Pending" class="form-radio">
                            <span class="ml-2">Partial Pending</span>
                        </label>
                        <label class="inline-flex items-center">
                            <input type="radio" name="financialStatus" value="Pending" class="form-radio">
                            <span class="ml-2">Pending</span>
                        </label>
                    </div>
                    <span id="financialStatusError" class="field-error hidden"></span>
                </div>
                <div>
                    <label for="kitPaymentStatus" class="block text-sm font-medium text-gray-700">Kit Payment Status</label>
                    <input type="text" id="kitPaymentStatus" name="kitPaymentStatus" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm p-2" required>
                    <span id="kitPaymentStatusError" class="field-error hidden"></span>
                </div>
                <div>
                    <label for="trainerRemunerationStatus" class="block text-sm font-medium text-gray-700">Trainer Remuneration Status</label>
                    <input type="text" id="trainerRemunerationStatus" name="trainerRemunerationStatus" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm p-2" required>
                    <span id="trainerRemunerationStatusError" class="field-error hidden"></span>
                </div>
                <div>
                    <label for="paymentMode" class="block text-sm font-medium text-gray-700">Payment Mode</label>
                    <input type="text" id="paymentMode" name="paymentMode" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm p-2" required>
                    <span id="paymentModeError" class="field-error hidden"></span>
                </div>
                <div>
                    <label for="transactionId" class="block text-sm font-medium text-gray-700">Cheque/UPI Transaction ID</label>
                    <input type="text" id="transactionId" name="transactionId" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm p-2" required>
                    <span id="transactionIdError" class="field-error hidden"></span>
                </div>
            </div>
        </div>

        <!-- Coordinator Declaration -->
        <div>
            <h4 class="text-lg font-medium mb-2">Coordinator Declaration</h4>
            <div class="flex items-center">
                <input type="checkbox" id="coordinatorDeclaration" name="coordinatorDeclaration" class="form-checkbox" required>
                <label for="coordinatorDeclaration" class="ml-2 text-sm text-gray-700">I confirm that all workshop responsibilities were completed and documents collected.</label>
            </div>
            <span id="coordinatorDeclarationError" class="field-error hidden"></span>
            <div class="grid grid-cols-1 gap-4 mt-4">
                <div>
                    <label for="coordinatorSignature" class="block text-sm font-medium text-gray-700">Signature (Coordinator)</label>
                    <input type="text" id="coordinatorSignature" name="coordinatorSignature" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm p-2" required>
                    <span id="coordinatorSignatureError" class="field-error hidden"></span>
                </div>
                <div>
                    <label for="coordinatorDate" class="block text-sm font-medium text-gray-700">Date</label>
                    <input type="date" id="coordinatorDate" name="coordinatorDate" max="<%= new Date().toISOString().split('T')[0] %>" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm p-2" required>
                    <span id="coordinatorDateError" class="field-error hidden"></span>
                </div>
                <div>
                    <label for="coordinatorPlace" class="block text-sm font-medium text-gray-700">Place</label>
                    <input type="text" id="coordinatorPlace" name="coordinatorPlace" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm p-2" required>
                    <span id="coordinatorPlaceError" class="field-error hidden"></span>
                </div>
            </div>
        </div>

        <button type="submit" class="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded flex items-center">
            <span id="submitText">Submit Form</span>
            <svg id="loadingSpinner" class="hidden animate-spin h-5 w-5 ml-2 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8v8z"></path>
            </svg>
        </button>
    </form>
</div>
        <!-- Upload Media Tab -->
       <div id="upload-media" class="tab-content">
            <h3 class="text-xl font-semibold mb-4">Upload Media</h3>
            <div class="space-y-4">
                <div>
                    <a href="/download-template" class="bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded inline-block">Download Excel Template</a>
                </div>
                <div id="uploadMediaError" class="hidden bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4"></div>
                <div id="uploadMediaSuccess" class="hidden bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded mb-4"></div>
                <form method="POST" action="/upload-excel" enctype="multipart/form-data" class="space-y-4" id="uploadMediaForm">
                    <div>
                        <label for="excelFile" class="block text-sm font-medium text-gray-700">Upload Excel File</label>
                        <input type="file" id="excelFile" name="excelFile" accept=".xlsx,.xls" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm" required>
                        <span id="excelFileError" class="field-error hidden"></span>
                    </div>
                    <button type="submit" class="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded flex items-center">
                        <span id="uploadMediaSubmitText">Upload</span>
                        <svg id="uploadMediaLoadingSpinner" class="hidden animate-spin h-5 w-5 ml-2 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8v8z"></path>
                        </svg>
                    </button>
                </form>
            </div>
        </div>
        <!-- Student Feedback Form Tab -->
        <div id="student-feedback" class="tab-content">
            <h3 class="text-xl font-semibold mb-4">Student Feedback Form</h3>
            <div class="space-y-4">
                <div>
                    <a href="/download-feedback-template" class="bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded inline-block">Download Feedback Excel Template</a>
                </div>
                <div id="uploadFeedbackError" class="hidden bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4"></div>
                <div id="uploadFeedbackSuccess" class="hidden bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded mb-4"></div>
                <form method="POST" action="/upload-feedback-excel" enctype="multipart/form-data" class="space-y-4" id="uploadFeedbackForm">
                    <div>
                        <label for="feedbackExcelFile" class="block text-sm font-medium text-gray-700">Upload Feedback Excel File</label>
                        <input type="file" id="feedbackExcelFile" name="feedbackExcelFile" accept=".xlsx,.xls" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm" required>
                        <span id="feedbackExcelFileError" class="field-error hidden"></span>
                    </div>
                    <button type="submit" class="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded flex items-center">
                        <span id="uploadFeedbackSubmitText">Upload</span>
                        <svg id="uploadFeedbackLoadingSpinner" class="hidden animate-spin h-5 w-5 ml-2 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8v8z"></path>
                        </svg>
                    </button>
                </form>
            </div>
        </div>
    </div>

    <script>
        // Tab switching logic
        function switchTab(targetTab) {
            document.querySelectorAll('.tab-content').forEach(tab => tab.classList.remove('active'));
            document.querySelectorAll('.tab-link').forEach(link => link.classList.remove('active'));
            document.querySelector(`#${targetTab}`).classList.add('active');
            document.querySelector(`.tab-link[href="#${targetTab}"]`).classList.add('active');
        }

        document.querySelectorAll('.tab-link').forEach(link => {
            link.addEventListener('click', function (e) {
                e.preventDefault();
                const targetTab = this.getAttribute('href').substring(1);
                switchTab(targetTab);
            });
        });

        // Initialize filters for Coordinator Summary Table
        function initializeFilters(tableId) {
            const table = document.getElementById(tableId);
            if (!table) return;
            const headers = table.querySelectorAll('th[data-filter]');
            const rows = table.querySelectorAll('tbody tr');

            headers.forEach(header => {
                const column = header.dataset.filter;
                const select = header.querySelector('.filter-select');
                if (!select) return;

                const values = new Set(['All']);
                rows.forEach(row => {
                    const cell = row.querySelector(`td[data-column="${column}"]`);
                    if (cell && cell.textContent.trim()) values.add(cell.textContent.trim());
                });

                select.innerHTML = '';
                [...values].sort().forEach(value => {
                    const option = document.createElement('option');
                    option.value = value;
                    option.textContent = value;
                    if (value === 'All') option.selected = true;
                    select.appendChild(option);
                });

                select.addEventListener('change', () => applyFilters(tableId));
            });
        }

        function applyFilters(tableId) {
            const table = document.getElementById(tableId);
            if (!table) return;
            const rows = table.querySelectorAll('tbody tr');
            const filters = {};

            table.querySelectorAll('.filter-select').forEach(select => {
                filters[select.dataset.column] = select.value.trim();
            });

            rows.forEach(row => {
                let show = true;
                for (const [column, value] of Object.entries(filters)) {
                    if (value && value !== 'All') {
                        const cell = row.querySelector(`td[data-column="${column}"]`);
                        if (cell && cell.textContent.trim() !== value) {
                            show = false;
                            break;
                        }
                    }
                }
                row.style.display = show ? '' : 'none';
            });
        }

        // Validate Workshop Summary form
        function validateWorkshopForm(form) {
            const requiredFields = form.querySelectorAll('input[required], textarea[required], select[required]');
            let isValid = true;

            form.querySelectorAll('.error-border').forEach(field => field.classList.remove('error-border'));
            form.querySelectorAll('.field-error').forEach(error => {
                error.classList.add('hidden');
                error.textContent = '';
            });

            requiredFields.forEach(field => {
                if (!field.value.trim()) {
                    isValid = false;
                    field.classList.add('error-border');
                    const errorSpan = document.getElementById(`${field.id}Error`);
                    if (errorSpan) {
                        errorSpan.textContent = `Please fill in the ${field.name} field.`;
                        errorSpan.classList.remove('hidden');
                    }
                }
            });

            const financialStatus = form.querySelector('input[name="financialStatus"]:checked');
            const financialStatusError = document.getElementById('financialStatusError');
            if (!financialStatus) {
                isValid = false;
                form.querySelectorAll('input[name="financialStatus"]').forEach(radio => radio.classList.add('error-border'));
                financialStatusError.textContent = 'Please select a Financial Status.';
                financialStatusError.classList.remove('hidden');
            }

            const coordinatorDeclaration = form.querySelector('#coordinatorDeclaration');
            const coordinatorDeclarationError = document.getElementById('coordinatorDeclarationError');
            if (!coordinatorDeclaration.checked) {
                isValid = false;
                coordinatorDeclaration.classList.add('error-border');
                coordinatorDeclarationError.textContent = 'Please confirm the Coordinator Declaration.';
                coordinatorDeclarationError.classList.remove('hidden');
            }

            return isValid;
        }

        // Handle form submission with error handling
        async function handleFormSubmission(form, url, successDiv, errorDiv, submitButton, submitText, loadingSpinner) {
            const formData = new FormData(form);
            submitButton.disabled = true;
            submitText.textContent = 'Submitting...';
            loadingSpinner.classList.remove('hidden');
            errorDiv.classList.add('hidden');
            successDiv.classList.add('hidden');

            try {
                const response = await fetch(url, {
                    method: 'POST',
                    body: formData
                });
                const result = await response.json();

                submitButton.disabled = false;
                submitText.textContent = form.id === 'uploadMediaForm' ? 'Upload' : 'Submit Form';
                loadingSpinner.classList.add('hidden');

                if (response.ok) {
                    successDiv.textContent = result.message || 'Submission successful!';
                    successDiv.classList.remove('hidden');
                    form.reset();
                    setTimeout(() => successDiv.classList.add('hidden'), 5000);
                    if (form.id === 'uploadMediaForm') {
                        switchTab('visited-school');
                    } else if (form.id === 'uploadFeedbackForm') {
                        switchTab('student-feedback');
                    }
                } else {
                    errorDiv.innerHTML = result.error || 'Failed to submit form.';
                    if (result.details) {
                        errorDiv.innerHTML += '<ul class="list-disc pl-5 mt-2">' +
                            (Array.isArray(result.details) ? result.details.map(d => `<li>${d}</li>`).join('') : `<li>${result.details}</li>`) +
                            '</ul>';
                    }
                    errorDiv.classList.remove('hidden');
                    setTimeout(() => errorDiv.classList.add('hidden'), 10000);
                }
            } catch (err) {
                console.error(`Error submitting ${form.id}:`, err);
                errorDiv.textContent = `Error submitting form: ${err.message}`;
                errorDiv.classList.remove('hidden');
                submitButton.disabled = false;
                submitText.textContent = form.id === 'uploadMediaForm' ? 'Upload' : 'Submit Form';
                loadingSpinner.classList.add('hidden');
                setTimeout(() => errorDiv.classList.add('hidden'), 5000);
            }
        }

        // Window onload for initialization
        window.onload = function () {
            // Open the default tab
            switchTab('coordinator-summary');
            initializeFilters('coordinatorSummaryTable');

            // Clear query param messages after display
            const urlParams = new URLSearchParams(window.location.search);
            if (urlParams.has('success') || urlParams.has('error')) {
                history.replaceState(null, '', window.location.pathname);
            }

            // Handle Workshop Summary form submission
            const workshopForm = document.querySelector('#workshopSummaryForm');
            if (workshopForm) {
                workshopForm.addEventListener('submit', async function (e) {
                    e.preventDefault();
                    if (!validateWorkshopForm(this)) return;
                    handleFormSubmission(
                        this,
                        '/submit-workshop-summary',
                        document.getElementById('successMessage'),
                        document.getElementById('errorMessage'),
                        this.querySelector('button[type="submit"]'),
                        this.querySelector('#submitText'),
                        this.querySelector('#loadingSpinner')
                    );
                });
            }

            // Handle Media Excel upload
            const mediaUploadForm = document.querySelector('#uploadMediaForm');
            if (mediaUploadForm) {
                mediaUploadForm.addEventListener('submit', async function (e) {
                    e.preventDefault();
                    const fileInput = this.querySelector('#excelFile');
                    const errorSpan = document.getElementById('excelFileError');
                    const errorDiv = document.getElementById('uploadMediaError');
                    const successDiv = document.getElementById('uploadMediaSuccess');
                    const submitButton = this.querySelector('button[type="submit"]');
                    const submitText = this.querySelector('#uploadMediaSubmitText');
                    const loadingSpinner = this.querySelector('#uploadMediaLoadingSpinner');

                    // Reset error states
                    fileInput.classList.remove('error-border');
                    errorSpan.classList.add('hidden');
                    errorDiv.classList.add('hidden');
                    successDiv.classList.add('hidden');

                    // Validate file input
                    if (!fileInput.files.length) {
                        errorSpan.textContent = 'Please select an Excel file to upload.';
                        errorSpan.classList.remove('hidden');
                        fileInput.classList.add('error-border');
                        return;
                    }
                    if (!fileInput.files[0].name.match(/\.(xlsx|xls)$/)) {
                        errorSpan.textContent = 'Only .xlsx or .xls files are allowed.';
                        errorSpan.classList.remove('hidden');
                        fileInput.classList.add('error-border');
                        return;
                    }

                    handleFormSubmission(
                        this,
                        '/upload-excel',
                        successDiv,
                        errorDiv,
                        submitButton,
                        submitText,
                        loadingSpinner
                    );
                });
            }

            // Handle Feedback Excel upload
            const feedbackUploadForm = document.querySelector('#uploadFeedbackForm');
            if (feedbackUploadForm) {
                feedbackUploadForm.addEventListener('submit', async function (e) {
                    e.preventDefault();
                    const fileInput = this.querySelector('#feedbackExcelFile');
                    const errorSpan = document.getElementById('feedbackExcelFileError');
                    const errorDiv = document.getElementById('uploadFeedbackError');
                    const successDiv = document.getElementById('uploadFeedbackSuccess');
                    const submitButton = this.querySelector('button[type="submit"]');
                    const submitText = this.querySelector('#uploadFeedbackSubmitText');
                    const loadingSpinner = this.querySelector('#uploadFeedbackLoadingSpinner');

                    // Reset error states
                    fileInput.classList.remove('error-border');
                    errorSpan.classList.add('hidden');
                    errorDiv.classList.add('hidden');
                    successDiv.classList.add('hidden');

                    // Validate file input
                    if (!fileInput.files.length) {
                        errorSpan.textContent = 'Please select an Excel file to upload.';
                        errorSpan.classList.remove('hidden');
                        fileInput.classList.add('error-border');
                        return;
                    }
                    if (!fileInput.files[0].name.match(/\.(xlsx|xls)$/)) {
                        errorSpan.textContent = 'Only .xlsx or .xls files are allowed.';
                        errorSpan.classList.remove('hidden');
                        fileInput.classList.add('error-border');
                        return;
                    }

                    handleFormSubmission(
                        this,
                        '/upload-feedback-excel',
                        successDiv,
                        errorDiv,
                        submitButton,
                        submitText,
                        loadingSpinner
                    );
                });
            }

            // Status update logic for visited schools
            document.querySelectorAll('.update-status-form').forEach(form => {
                form.addEventListener('submit', async function (e) {
                    e.preventDefault();
                    const id = this.getAttribute('data-id');
                    const status = this.querySelector('select[name="status"]').value;
                    const action = this.getAttribute('action');

                    try {
                        const response = await fetch(action, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                            body: new URLSearchParams({ id, status })
                        });
                        const result = await response.json();

                        if (response.ok) {
                            alert(`Status updated to ${status.charAt(0).toUpperCase() + status.slice(1)} for school ID ${id}`);
                            window.location.reload();
                        } else {
                            alert(result.error || 'Failed to update status.');
                        }
                    } catch (err) {
                        console.error('Error updating status:', err);
                        alert(`Error updating status: ${err.message}`);
                    }
                });
            });
        };
    </script>
</body>
</html>